{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6********","webpack:///./src/Donation.js?77e7","webpack:///./src/Event.js?5bfa","webpack:///./src/EventCategory.js?88fd","webpack:///./src/schema/eventCategory.js?6e50","webpack:///./src/EventInvitation.js?0c34","webpack:///./src/schema/eventInvitation.js?b2d4","webpack:///./src/EventMessage.js?9060","webpack:///./src/schema/eventMessage.js?f4cb","webpack:///./src/EventTicket.js?9e2b","webpack:///./src/schema/eventTicket.js?1c46","webpack:///./src/schema/event.js?54cd","webpack:///./src/Profile.js?2021","webpack:///./src/schema/profile.js?26f5","webpack:///./src/Quickcard.js?3b87","webpack:///./src/schema/quickcard.js?6dbf","webpack:///./src/schema/quickcardPay.js?bde8","webpack:///./src/Subscription.js?6fa2","webpack:///./src/Supporter.js?b6c4","webpack:///./src/schema/supporter.js?7848","webpack:///./src/groundworkFactory.js?9454","webpack:///./src/index.js"],"names":["ENDPOINT_DONATION","Donation","opts","whitelist","params","perPage","url","namespace","fetchCollection","id","donation","checkDonation","validatePayment","valid","response","http","generateErrorResponse","reject","_donation","attachIdentity","post","service","NAMESPACE","ENDPOINT_EVENT","ENDPOINT_CATEGORY","ENDPOINT_INVITATION","ENDPOINT_MESSAGE","ENDPOINT_TICKET","ENDPOINT_HOST_UNSUBSCRIBE","Event","config","Error","schemaUtils","payload","schema","out","validateSchema","length","ret","generateErrorObject","forEach","err","msg","push","message","fields","extractFieldByError","name","undefined","_opts","get","eventId","validateId","ev","ep","event","validatePayload","eventv","eventp","patch","put","delete","email","invitationId","messageId","EventCategory","categoryId","cv","cp","category","categoryv","categoryp","STATUSES","EventInvitation","status","some","s","iv","ip","invitations","validateStatus","sv","sp","EventMessage","mv","mp","EventTicket","ticketId","tv","tp","ticket","ticketv","ticketp","ENDPOINT_PROFILE","ENDPOINT_PASSWORD_RESET","Profile","profile","_schema","gwid","validateProfile","cf","putSchema","required","token","password","ENDPOINT_QUICKCARD","Quickcard","idv","idp","quickcard","_quickcard","checkQuickcard","time","date","apply","deleted","payment","_payment","pv","pp","ENDPOINT_SUBSCRIPTION","Subscription","subscription","validateInterval","interval","intervalv","intervalp","checkSubscription","_subscription","cancelled","amount","newAmount","Number","validateArg","amountv","amountp","ENDPOINT_SUPPORTERS","Supporter","form","validateForm","groundworkFactory","services","lambda","Groundwork","module","exports"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;;;;AACA;;;;AACA;;;;AAEA;AACA,KAAMA,oBAAoB,WAA1B;;AAEA;;;;;;;;;KAQqBC,Q;;;;;;;;;;;;AAInB;;;;;;;;;;;;;4BAagB;AAAA,WAAXC,IAAW,uEAAJ,EAAI;;AACd,WAAMC,YAAY,CAAC,MAAD,EAAS,cAAT,EAAyB,WAAzB,EAAsC,OAAtC,EAA+C,MAA/C,EACD,SADC,CAAlB;;AAGA,WAAMC,SAAS,iBAAKD,SAAL,EAAgBD,IAAhB,CAAf;AACA,WAAIE,OAAOC,OAAX,EAAoB;AAClBD,gBAAOC,OAAP,GAAiB,gBAAID,OAAOC,OAAX,CAAjB,CADkB,CACoB;AACvC;;AAED,WAAMC,MAAM,oBAAQ,KAAKC,SAAb,EAAwBP,iBAAxB,CAAZ;AACA,cAAO,KAAKQ,eAAL,CAAqBF,GAArB,EAA0BF,MAA1B,CAAP;AACD;;AAED;;;;;;;AA7BA;;;;6BAmCe;AAAA,WAATK,EAAS,uEAAJ,EAAI;;AACb,WAAMH,MAAM,oBAAQ,KAAKC,SAAb,EAAwBP,iBAAxB,EAA2CS,EAA3C,CAAZ;AACA,cAAO,KAAKD,eAAL,CAAqBF,GAArB,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;8BAkBsB;AAAA,WAAfI,QAAe,uEAAJ,EAAI;;AACpB,WAAMC,gBAAgB,KAAKC,eAAL,CAAqBF,QAArB,qBAAtB;;AAEA;AACA,WAAIC,cAAcE,KAAd,KAAwB,KAA5B,EAAmC;AACjC,aAAMC,WAAW,KAAKC,IAAL,CAAUC,qBAAV,CAAgCL,aAAhC,CAAjB;AACA,gBAAO,kBAAQM,MAAR,CAAeH,QAAf,CAAP;AACD;;AAED,WAAMI,YAAY,KAAKC,cAAL,CAAoBT,QAApB,CAAlB;AACA,WAAMJ,MAAM,oBAAQ,KAAKC,SAAb,EAAwBP,iBAAxB,CAAZ;AACA,cAAO,KAAKe,IAAL,CAAUK,IAAV,CAAed,GAAf,EAAoBY,SAApB,CAAP;AACD;;;;;AAvEkBjB,S,CAEZoB,O,GAAU,W;mBAFEpB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfrB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;AACO,KAAMqB,gCAAY,QAAlB;;AAEP;AACO,KAAMC,0CAAiB,QAAvB;;AAEP;AACO,KAAMC,gDAAoB,YAA1B;;AAEP;AACO,KAAMC,oDAAsB,aAA5B;;AAEP;AACO,KAAMC,8CAAmB,UAAzB;;AAEP;AACO,KAAMC,4CAAkB,SAAxB;;AAEP;AACO,KAAMC,gEAA4B,kBAAlC;;AAEP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAuDMC,K;;AAIJ;;;;AAIA,kBAAYC,MAAZ,EAAoBf,IAApB,EAA0B;AAAA;;AACxB;AACA,UAAKe,MAAL,GAAeA,UAAUA,sCAAX,GACZA,MADY,GACH,0BADX;;AAGA;AACA,SAAI,CAACf,IAAL,EAAW;AACT,aAAM,IAAIgB,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAED;AACA,UAAKhB,IAAL,GAAYA,IAAZ;;AAEA;AACA,UAAKiB,WAAL;AACD;;AAED;;;;;;;;;AAxBA;;;;;uCAgCsC;AAAA;;AAAA,WAAtBC,OAAsB,uEAAZ,EAAY;AAAA,WAARC,MAAQ;;AACpC,WAAIC,MAAM,CAAC,IAAD,CAAV;AACA,WAAMtB,QAAQ,KAAKmB,WAAL,CAAiBI,cAAjB,CAAgCH,OAAhC,EAAyCC,MAAzC,CAAd;;AAEA,WAAIrB,MAAMwB,MAAN,GAAe,CAAnB,EAAsB;AAAA;AACpB,eAAMC,MAAM,MAAKvB,IAAL,CAAUwB,mBAAV,EAAZ;AACA1B,iBAAM2B,OAAN,CAAc,UAACC,GAAD,EAAS;AACrBH,iBAAII,GAAJ,CAAQC,IAAR,CAAaF,IAAIG,OAAjB;AACAN,iBAAIO,MAAJ,CAAWF,IAAX,CAAgB,MAAKX,WAAL,CAAiBc,mBAAjB,CAAqCL,GAArC,CAAhB;AACD,YAHD;AAIAN,iBAAM,CAAC,KAAD,EAAQ,kBAAQlB,MAAR,CAAe,MAAKF,IAAL,CAAUC,qBAAV,CAAgCsB,GAAhC,CAAf,CAAR,CAAN;AANoB;AAOrB;AACD,cAAOH,GAAP;AACD;;AAED;;;;;;;;;;;gCAQW1B,E,EAAe;AAAA,WAAXsC,IAAW,uEAAJ,EAAI;;AACxB,WAAIZ,MAAM,CAAC,IAAD,CAAV;;AAEA,WAAI,OAAO1B,EAAP,KAAc,QAAd,IAA0BA,OAAO,IAAjC,IAAyCA,OAAOuC,SAAhD,IAA6DvC,OAAO,KAAxE,EAA+E;AAC7E,aAAMK,WAAW,KAAKC,IAAL,CAAUC,qBAAV,CAAgC;AAC/CH,kBAAO,KADwC;AAE/CgC,mBAAQ,CAACE,IAAD,CAFuC;AAG/CL,gBAAK,kBAAgBK,IAAhB;AAH0C,UAAhC,CAAjB;AAKAZ,eAAM,CAAC,KAAD,EAAQ,kBAAQlB,MAAR,CAAeH,QAAf,CAAR,CAAN;AACD;;AAED,cAAOqB,GAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAiCgB;AAAA,WAAXjC,IAAW,uEAAJ,EAAI;;AACd,WAAM+C,QAAQ,iBAAK,CAAC,UAAD,EAAa,WAAb,EAA0B,UAA1B,EAAsC,WAAtC,EAAmD,MAAnD,EACC,SADD,EACY,QADZ,EACsB,QADtB,EACgC,cADhC,EAEC,aAFD,CAAL,EAEsB/C,IAFtB,CAAd;;AAIA,WAAMI,MAAM,oBAAQgB,SAAR,EAAmBC,cAAnB,CAAZ;AACA,cAAO,KAAKR,IAAL,CAAUmC,GAAV,CAAc5C,GAAd,EAAmB,EAAEF,QAAQ6C,KAAV,EAAnB,CAAP;AACD;;AAED;;;;;;;;;2BAMME,O,EAAS;AAAA,yBACI,KAAKC,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADJ;AAAA;AAAA,WACNE,EADM;AAAA,WACFC,EADE;;AAEb,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAMhD,MAAM,oBAAQgB,SAAR,EAAmBC,cAAnB,EAAmC4B,OAAnC,CAAZ;AACA,cAAO,KAAKpC,IAAL,CAAUmC,GAAV,CAAc5C,GAAd,CAAP;AACD;;AAED;;;;;;;;;;;;8BASmB;AAAA,WAAZiD,KAAY,uEAAJ,EAAI;;AAAA,8BACQ,KAAKC,eAAL,CAAqBD,KAArB,kBADR;AAAA;AAAA,WACVE,MADU;AAAA,WACFC,MADE;;AAEjB,WAAI,CAACD,MAAL,EAAa;AAAE,gBAAOC,MAAP;AAAgB;;AAE/B,WAAMpD,MAAM,oBAAQgB,SAAR,EAAmBC,cAAnB,CAAZ;AACA,cAAO,KAAKR,IAAL,CAAUK,IAAV,CAAed,GAAf,EAAoBiD,KAApB,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;4BAaOJ,O,EAAqB;AAAA,WAAZI,KAAY,uEAAJ,EAAI;;AAAA,0BACT,KAAKH,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADS;AAAA;AAAA,WACnBE,EADmB;AAAA,WACfC,EADe;;AAE1B,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAMhD,MAAM,oBAAQgB,SAAR,EAAmBC,cAAnB,EAAmC4B,OAAnC,CAAZ;AACA,cAAO,KAAKpC,IAAL,CAAU4C,KAAV,CAAgBrD,GAAhB,EAAqBiD,KAArB,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;;6BAcQJ,O,EAAqB;AAAA,WAAZI,KAAY,uEAAJ,EAAI;;AAAA,0BACV,KAAKH,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADU;AAAA;AAAA,WACpBE,EADoB;AAAA,WAChBC,EADgB;;AAE3B,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAFI,+BAIF,KAAKE,eAAL,CAAqBD,KAArB,kBAJE;AAAA;AAAA,WAIpBE,MAJoB;AAAA,WAIZC,MAJY;;AAK3B,WAAI,CAACD,MAAL,EAAa;AAAE,gBAAOC,MAAP;AAAgB;;AAE/B,WAAMpD,MAAM,oBAAQgB,SAAR,EAAmBC,cAAnB,EAAmC4B,OAAnC,CAAZ;AACA,cAAO,KAAKpC,IAAL,CAAU6C,GAAV,CAActD,GAAd,EAAmBiD,KAAnB,CAAP;AACD;;AAED;;;;;;;;;;;;yBASIJ,O,EAAS;AAAA,0BACM,KAAKC,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADN;AAAA;AAAA,WACJE,EADI;AAAA,WACAC,EADA;;AAEX,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAMhD,MAAM,oBAAQgB,SAAR,EAAmBC,cAAnB,EAAmC4B,OAAnC,CAAZ;AACA,cAAO,KAAKpC,IAAL,CAAU8C,MAAV,CAAiBvD,GAAjB,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAyB0B;AAAA,WAAXJ,IAAW,uEAAJ,EAAI;;AACxB,WAAM+C,QAAQ,iBAAK,CAAC,YAAD,EAAe,MAAf,EAAuB,SAAvB,EAAkC,eAAlC,EACC,cADD,EACiB,aADjB,CAAL,EACsC/C,IADtC,CAAd;;AAGA,WAAMI,MAAM,oBAAQgB,SAAR,EAAmBK,eAAnB,CAAZ;AACA,cAAO,KAAKZ,IAAL,CAAUmC,GAAV,CAAc5C,GAAd,EAAmB,EAAEF,QAAQ6C,KAAV,EAAnB,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;iCAaYa,K,EAAkB;AAAA,WAAX5D,IAAW,uEAAJ,EAAI;;AAC5B,WAAMW,QAAQ,uBAAWiD,KAAX,KAAsB,QAAO5D,IAAP,uDAAOA,IAAP,OAAgB,QAApD;;AAEA,WAAI,CAACW,KAAL,EAAY;AACV,aAAMC,WAAW,KAAKC,IAAL,CAAUC,qBAAV,CAAgC;AAC/CH,kBAAO,KADwC;AAE/CgC,mBAAQ,CAAC,OAAD,EAAU,MAAV,CAFuC;AAG/CH,gBAAK,2DAA6DoB,KAA7D,qCACc5D,IADd;AAH0C,UAAhC,CAAjB;;AAOA,gBAAO,kBAAQe,MAAR,CAAeH,QAAf,CAAP;AACD;;AAZ2B,WAcpBiD,YAdoB,GAcQ7D,IAdR,CAcpB6D,YAdoB;AAAA,WAcNC,SAdM,GAcQ9D,IAdR,CAcN8D,SAdM;;AAgB5B;;AACA,WAAID,gBAAgBC,SAApB,EAA+B;AAC7B,aAAMlD,YAAW,KAAKC,IAAL,CAAUC,qBAAV,CAAgC;AAC/CH,kBAAO,KADwC;AAE/CgC,mBAAQ,CAAC,cAAD,EAAiB,WAAjB,CAFuC;AAG/CH,gBAAK,CAAC,+DAAD;AAH0C,UAAhC,CAAjB;;AAMA,gBAAO,kBAAQzB,MAAR,CAAeH,SAAf,CAAP;AACD;;AAED,WAAMR,MAAM,oBAAQgB,SAAR,EAAmBM,yBAAnB,CAAZ;AACA,cAAO,KAAKb,IAAL,CAAUmC,GAAV,CAAc5C,GAAd,EAAmB,EAAEF,QAAQ,EAAE0D,YAAF,EAASC,0BAAT,EAAuBC,oBAAvB,EAAV,EAAnB,CAAP;AACD;;;;;AA1RGnC,M,CAEGR,O,GAAU,Q;;;AA2RnB,mBACEQ,KADF;;mBAQeA,K;;;;;;;;;;;;;;;;;;;;;;;;;AC1Xf;;AACA;;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAyCqBoC,a;;;;;;;;AACnB;;;;;;;;;;;;;;;;;oCAiBed,O,EAAoB;AAAA,WAAXjD,IAAW,uEAAJ,EAAI;;AAAA,yBAChB,KAAKkD,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADgB;AAAA;AAAA,WAC1BE,EAD0B;AAAA,WACtBC,EADsB;;AAEjC,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAML,QAAQ,iBAAK,CAAC,MAAD,EAAS,SAAT,EAAoB,cAApB,EAAoC,aAApC,CAAL,EAAyD/C,IAAzD,CAAd;AACA,WAAMI,MAAM,6DAAmC6C,OAAnC,2BAAZ;;AAGA,cAAO,KAAKpC,IAAL,CAAUmC,GAAV,CAAc5C,GAAd,EAAmB,EAAEF,QAAQ6C,KAAV,EAAnB,CAAP;AACD;;AAED;;;;;;;;;;mCAOcE,O,EAASe,U,EAAY;AAAA,0BAChB,KAAKd,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADgB;AAAA;AAAA,WAC1BE,EAD0B;AAAA,WACtBC,EADsB;;AAEjC,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAFU,0BAIhB,KAAKF,UAAL,CAAgBc,UAAhB,EAA4B,YAA5B,CAJgB;AAAA;AAAA,WAI1BC,EAJ0B;AAAA,WAItBC,EAJsB;;AAKjC,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAM9D,MAAM,6DAAmC6C,OAAnC,4BACsCe,UADtC,CAAZ;AAEA,cAAO,KAAKnD,IAAL,CAAUmC,GAAV,CAAc5C,GAAd,CAAP;AACD;;AAED;;;;;;;;;;oCAOe6C,O,EAAwB;AAAA,WAAfkB,QAAe,uEAAJ,EAAI;;AAAA,0BACpB,KAAKjB,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADoB;AAAA;AAAA,WAC9BE,EAD8B;AAAA,WAC1BC,EAD0B;;AAErC,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAFc,8BAIN,KAAKE,eAAL,CAAqBa,QAArB,0BAJM;AAAA;AAAA,WAI9BC,SAJ8B;AAAA,WAInBC,SAJmB;;AAKrC,WAAI,CAACD,SAAL,EAAgB;AAAE,gBAAOC,SAAP;AAAmB;;AAErC,WAAMjE,MAAM,6DAAmC6C,OAAnC,2BAAZ;;AAGA,cAAO,KAAKpC,IAAL,CAAUK,IAAV,CAAed,GAAf,EAAoB+D,QAApB,CAAP;AACD;;AAED;;;;;;;;;;;;;oCAUelB,O,EAASe,U,EAA2B;AAAA,WAAfG,QAAe,uEAAJ,EAAI;;AAAA,0BAChC,KAAKjB,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADgC;AAAA;AAAA,WAC1CE,EAD0C;AAAA,WACtCC,EADsC;;AAEjD,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAF0B,2BAIhC,KAAKF,UAAL,CAAgBc,UAAhB,EAA4B,YAA5B,CAJgC;AAAA;AAAA,WAI1CC,EAJ0C;AAAA,WAItCC,EAJsC;;AAKjD,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAM9D,MAAM,6DAAmC6C,OAAnC,4BACsCe,UADtC,CAAZ;;AAGA,cAAO,KAAKnD,IAAL,CAAU4C,KAAV,CAAgBrD,GAAhB,EAAqB+D,QAArB,CAAP;AACD;;AAED;;;;;;;;;;;;;;qCAWgBlB,O,EAASe,U,EAA2B;AAAA,WAAfG,QAAe,uEAAJ,EAAI;;AAAA,2BACjC,KAAKjB,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADiC;AAAA;AAAA,WAC3CE,EAD2C;AAAA,WACvCC,EADuC;;AAElD,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAF2B,2BAIjC,KAAKF,UAAL,CAAgBc,UAAhB,EAA4B,YAA5B,CAJiC;AAAA;AAAA,WAI3CC,EAJ2C;AAAA,WAIvCC,EAJuC;;AAKlD,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAL2B,+BAOnB,KAAKZ,eAAL,CAAqBa,QAArB,0BAPmB;AAAA;AAAA,WAO3CC,SAP2C;AAAA,WAOhCC,SAPgC;;AAQlD,WAAI,CAACD,SAAL,EAAgB;AAAE,gBAAOC,SAAP;AAAmB;;AAErC,WAAMjE,MAAM,6DAAmC6C,OAAnC,4BACsCe,UADtC,CAAZ;;AAGA,cAAO,KAAKnD,IAAL,CAAU6C,GAAV,CAActD,GAAd,EAAmB+D,QAAnB,CAAP;AACD;;AAED;;;;;;;;;;;;iCASYlB,O,EAASe,U,EAAY;AAAA,2BACd,KAAKd,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADc;AAAA;AAAA,WACxBE,EADwB;AAAA,WACpBC,EADoB;;AAE/B,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAFQ,2BAId,KAAKF,UAAL,CAAgBc,UAAhB,EAA4B,YAA5B,CAJc;AAAA;AAAA,WAIxBC,EAJwB;AAAA,WAIpBC,EAJoB;;AAK/B,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAM9D,MAAM,6DAAmC6C,OAAnC,4BACsCe,UADtC,CAAZ;AAEA,cAAO,KAAKnD,IAAL,CAAU8C,MAAV,CAAiBvD,GAAjB,CAAP;AACD;;;;;mBAzIkB2D,a;;;;;;;;;;;;AC7CrB;;mBAEe;AACb,cAAW,yCADE;AAEb,SAAM,GAFO;AAGb,WAAQ,QAHK;AAIb,iBAAc;AACZ,oBAAe;AACb,aAAM,aADO;AAEb,eAAQ;AAFK,MADH;AAKZ,sBAAiB;AACf,aAAM,eADS;AAEf,eAAQ;AAFO,MALL;AASZ,gBAAW;AACT,aAAM,SADG;AAET,eAAQ;AAFC,MATC;AAaZ,kBAAa;AACX,aAAM,WADK;AAEX,eAAQ;AAFG,MAbD;AAiBZ,cAAS;AACP,aAAM,OADC;AAEP,eAAQ;AAFD;AAjBG,IAJD;AA0Bb,eAAY,CACV,eADU,EAEV,SAFU,EAGV,WAHU;AA1BC,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFf;;AACA;;AACA;;;;;;AAEA;AACA,KAAMO,WAAW,CAAC,UAAD,EAAa,SAAb,CAAjB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA4BqBC,e;;;;;;;;;AAEnB;;;;;;;oCAOeC,M,EAAQ;AACrB,WAAIvC,MAAM,CAAC,IAAD,CAAV;;AAEA,WAAMtB,QAAQ2D,SAASG,IAAT,CAAc;AAAA,gBAAKC,MAAMF,MAAX;AAAA,QAAd,CAAd;;AAEA,WAAI,CAAC7D,KAAL,EAAY;AACV,aAAMC,WAAW,KAAKC,IAAL,CAAUC,qBAAV,CAAgC;AAC/CH,kBAAO,KADwC;AAE/CgC,mBAAQ,CAAC,QAAD,CAFuC;AAG/CH,gBAAK,sBAAoBgC,MAApB;AAH0C,UAAhC,CAAjB;AAKAvC,eAAM,CAAC,KAAD,EAAQ,kBAAQlB,MAAR,CAAeH,QAAf,CAAR,CAAN;AACD;;AAED,cAAOqB,GAAP;AACD;;AAED;;;;;;;;;;;;;;;;qCAagBgB,O,EAAoB;AAAA,WAAXjD,IAAW,uEAAJ,EAAI;;AAAA,yBACjB,KAAKkD,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADiB;AAAA;AAAA,WAC3BE,EAD2B;AAAA,WACvBC,EADuB;;AAElC,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAML,QAAQ,iBAAK,CAAC,MAAD,EAAS,SAAT,EAAoB,QAApB,CAAL,EAAoC/C,IAApC,CAAd;AACA,WAAMI,MAAM,6DAAmC6C,OAAnC,6BAAZ;;AAGA,cAAO,KAAKpC,IAAL,CAAUmC,GAAV,CAAc5C,GAAd,EAAmB,EAAEF,QAAQ6C,KAAV,EAAnB,CAAP;AACD;;AAED;;;;;;;;;;qCAOgBE,O,EAASY,Y,EAAc;AAAA,0BACpB,KAAKX,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADoB;AAAA;AAAA,WAC9BE,EAD8B;AAAA,WAC1BC,EAD0B;;AAErC,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAFc,0BAIpB,KAAKF,UAAL,CAAgBW,YAAhB,EAA8B,cAA9B,CAJoB;AAAA;AAAA,WAI9Bc,EAJ8B;AAAA,WAI1BC,EAJ0B;;AAKrC,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAMxE,MAAM,6DAAmC6C,OAAnC,8BACwCY,YADxC,CAAZ;AAEA,cAAO,KAAKhD,IAAL,CAAUmC,GAAV,CAAc5C,GAAd,CAAP;AACD;;AAED;;;;;;;;;;sCAOiB6C,O,EAA2B;AAAA,WAAlB4B,WAAkB,uEAAJ,EAAI;;AAAA,0BACzB,KAAK3B,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADyB;AAAA;AAAA,WACnCE,EADmC;AAAA,WAC/BC,EAD+B;;AAE1C,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAFmB,8BAIzB,KAAKE,eAAL,CAAqBuB,WAArB,4BAJyB;AAAA;AAAA,WAInCF,EAJmC;AAAA,WAI/BC,EAJ+B;;AAK1C,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAMxE,MAAM,6DAAmC6C,OAAnC,6BAAZ;;AAGA,cAAO,KAAKpC,IAAL,CAAUK,IAAV,CAAed,GAAf,EAAoByE,WAApB,CAAP;AACD;;AAED;;;;;;;;;;;;4CASuB5B,O,EAASY,Y,EAAcW,M,EAAQ;AAAA,0BACnC,KAAKtB,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADmC;AAAA;AAAA,WAC7CE,EAD6C;AAAA,WACzCC,EADyC;;AAEpD,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAF6B,2BAInC,KAAKF,UAAL,CAAgBW,YAAhB,EAA8B,cAA9B,CAJmC;AAAA;AAAA,WAI7Cc,EAJ6C;AAAA,WAIzCC,EAJyC;;AAKpD,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAL6B,6BAOnC,KAAKE,cAAL,CAAoBN,MAApB,CAPmC;AAAA;AAAA,WAO7CO,EAP6C;AAAA,WAOzCC,EAPyC;;AAQpD,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAM5E,MAAM,6DAAmC6C,OAAnC,8BACwCY,YADxC,CAAZ;;AAGA,cAAO,KAAKhD,IAAL,CAAU4C,KAAV,CAAgBrD,GAAhB,EAAqB,EAAEoE,cAAF,EAArB,CAAP;AACD;;AAED;;;;;;;;;;mCAOcvB,O,EAASY,Y,EAAc;AAAA,2BAClB,KAAKX,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADkB;AAAA;AAAA,WAC5BE,EAD4B;AAAA,WACxBC,EADwB;;AAEnC,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAFY,2BAIlB,KAAKF,UAAL,CAAgBW,YAAhB,EAA8B,cAA9B,CAJkB;AAAA;AAAA,WAI5Bc,EAJ4B;AAAA,WAIxBC,EAJwB;;AAKnC,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAMxE,MAAM,6DAAmC6C,OAAnC,8BACwCY,YADxC,CAAZ;AAEA,cAAO,KAAKhD,IAAL,CAAU8C,MAAV,CAAiBvD,GAAjB,CAAP;AACD;;;;;mBAnIkBmE,e;;;;;;;;;;;;ACnCrB;;mBAEe;AACb,cAAW,yCADE;AAEb,SAAM,GAFO;AAGb,WAAQ,OAHK;AAIb,YAAS;AACP,WAAM,GADC;AAEP,aAAQ,QAFD;AAGP,mBAAc;AACZ,gBAAS;AACP,eAAM,OADC;AAEP,iBAAQ;AAFD,QADG;AAKZ,qBAAc;AACZ,eAAM,YADM;AAEZ,iBAAQ;AAFI,QALF;AASZ,oBAAa;AACX,eAAM,WADK;AAEX,iBAAQ;AAFG,QATD;AAaZ,kBAAW;AACT,eAAM,SADG;AAET,iBAAQ;AAFC,QAbC;AAiBZ,kBAAW;AACT,eAAM,SADG;AAET,iBAAQ;AAFC;AAjBC,MAHP;AAyBP,iBAAY,CACV,OADU;AAzBL,IAJI;AAiCb,eAAY,CACV,GADU;AAjCC,E;;;;;;;;;;;;;;;;;;;;;;;;;ACFf;;AACA;;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAqCqBU,Y;;;;;;;;;AAEnB;;;;;;;;;;;kCAWahC,O,EAAoB;AAAA,WAAXjD,IAAW,uEAAJ,EAAI;;AAAA,yBACd,KAAKkD,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADc;AAAA;AAAA,WACxBE,EADwB;AAAA,WACpBC,EADoB;;AAE/B,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAML,QAAQ,iBAAK,CAAC,MAAD,EAAS,SAAT,CAAL,EAA0B/C,IAA1B,CAAd;AACA,WAAMI,MAAM,6DAAmC6C,OAAnC,0BAAZ;;AAGA,cAAO,KAAKpC,IAAL,CAAUmC,GAAV,CAAc5C,GAAd,EAAmB,EAAEF,QAAQ6C,KAAV,EAAnB,CAAP;AACD;;AAED;;;;;;;;;;kCAOaE,O,EAASa,S,EAAW;AAAA,0BACd,KAAKZ,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADc;AAAA;AAAA,WACxBE,EADwB;AAAA,WACpBC,EADoB;;AAE/B,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAFQ,0BAId,KAAKF,UAAL,CAAgBY,SAAhB,EAA2B,WAA3B,CAJc;AAAA;AAAA,WAIxBoB,EAJwB;AAAA,WAIpBC,EAJoB;;AAK/B,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAM/E,MAAM,6DAAmC6C,OAAnC,2BACqCa,SADrC,CAAZ;AAEA,cAAO,KAAKjD,IAAL,CAAUmC,GAAV,CAAc5C,GAAd,CAAP;AACD;;AAED;;;;;;;;;;mCAOc6C,O,EAAuB;AAAA,WAAdP,OAAc,uEAAJ,EAAI;;AAAA,0BAClB,KAAKQ,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADkB;AAAA;AAAA,WAC5BE,EAD4B;AAAA,WACxBC,EADwB;;AAEnC,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAFY,8BAIlB,KAAKE,eAAL,CAAqBZ,OAArB,yBAJkB;AAAA;AAAA,WAI5BwC,EAJ4B;AAAA,WAIxBC,EAJwB;;AAKnC,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAM/E,MAAM,6DAAmC6C,OAAnC,0BAAZ;;AAGA,cAAO,KAAKpC,IAAL,CAAUK,IAAV,CAAed,GAAf,EAAoBsC,OAApB,CAAP;AACD;;AAED;;;;;;;;;;gCAOWO,O,EAASa,S,EAAW;AAAA,0BACZ,KAAKZ,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADY;AAAA;AAAA,WACtBE,EADsB;AAAA,WAClBC,EADkB;;AAE7B,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAFM,2BAIZ,KAAKF,UAAL,CAAgBY,SAAhB,EAA2B,WAA3B,CAJY;AAAA;AAAA,WAItBoB,EAJsB;AAAA,WAIlBC,EAJkB;;AAK7B,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAM/E,MAAM,6DAAmC6C,OAAnC,2BACqCa,SADrC,CAAZ;AAEA,cAAO,KAAKjD,IAAL,CAAU8C,MAAV,CAAiBvD,GAAjB,CAAP;AACD;;;;;mBAhFkB6E,Y;;;;;;;;;;;;ACzCrB;;mBAEe;AACb,cAAW,yCADE;AAEb,WAAQ,QAFK;AAGb,iBAAc;AACZ,gBAAW;AACT,eAAQ,QADC;AAET,aAAM;AAFG,MADC;AAKZ,uBAAkB;AAChB,eAAQ,OADQ;AAEhB,gBAAS;AACP,iBAAQ;AADD,QAFO;AAKhB,aAAM;AALU,MALN;AAYZ,gBAAW;AACT,eAAQ,QADC;AAET,aAAM;AAFG,MAZC;AAgBZ,iBAAY;AACV,eAAQ,QADE;AAEV,aAAM;AAFI,MAhBA;AAoBZ,cAAS;AACP,eAAQ,QADD;AAEP,aAAM;AAFC;AApBG,IAHD;AA4Bb,SAAM,GA5BO;AA6Bb,eAAY,CACV,gBADU,EAEV,UAFU;AA7BC,E;;;;;;;;;;;;;;;;;;;;;;;;;ACFf;;AACA;;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA+BqBG,W;;;;;;;;AACnB;;;;;;;;;;;;;;;;;;iCAkBYnC,O,EAASe,U,EAAuB;AAAA,WAAXhE,IAAW,uEAAJ,EAAI;;AAAA,yBACzB,KAAKkD,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADyB;AAAA;AAAA,WACnCE,EADmC;AAAA,WAC/BC,EAD+B;;AAE1C,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAFmB,0BAIzB,KAAKF,UAAL,CAAgBc,UAAhB,EAA4B,YAA5B,CAJyB;AAAA;AAAA,WAInCC,EAJmC;AAAA,WAI/BC,EAJ+B;;AAK1C,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAMnB,QAAQ,iBAAK,CAAC,YAAD,EAAe,MAAf,EAAuB,SAAvB,EAAkC,eAAlC,CAAL,EAAyD/C,IAAzD,CAAd;;AAEA,WAAMI,MAAM,6DAAmC6C,OAAnC,4BACsCe,UADtC,yBAAZ;;AAIA,cAAO,KAAKnD,IAAL,CAAUmC,GAAV,CAAc5C,GAAd,EAAmB,EAAEF,QAAQ6C,KAAV,EAAnB,CAAP;AACD;;AAED;;;;;;;;;;;iCAQYE,O,EAASe,U,EAAYqB,Q,EAAU;AAAA,0BACxB,KAAKnC,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADwB;AAAA;AAAA,WAClCE,EADkC;AAAA,WAC9BC,EAD8B;;AAEzC,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAFkB,0BAIxB,KAAKF,UAAL,CAAgBc,UAAhB,EAA4B,YAA5B,CAJwB;AAAA;AAAA,WAIlCC,EAJkC;AAAA,WAI9BC,EAJ8B;;AAKzC,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AALkB,0BAOxB,KAAKhB,UAAL,CAAgBmC,QAAhB,EAA0B,UAA1B,CAPwB;AAAA;AAAA,WAOlCC,EAPkC;AAAA,WAO9BC,EAP8B;;AAQzC,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAMnF,MAAM,6DAAmC6C,OAAnC,4BACsCe,UADtC,0BAEoCqB,QAFpC,CAAZ;AAGA,cAAO,KAAKxE,IAAL,CAAUmC,GAAV,CAAc5C,GAAd,CAAP;AACD;;AAED;;;;;;;;;;;kCAQa6C,O,EAASe,U,EAAyB;AAAA,WAAbwB,MAAa,uEAAJ,EAAI;;AAAA,2BAC5B,KAAKtC,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CAD4B;AAAA;AAAA,WACtCE,EADsC;AAAA,WAClCC,EADkC;;AAE7C,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAFsB,2BAI5B,KAAKF,UAAL,CAAgBc,UAAhB,EAA4B,YAA5B,CAJ4B;AAAA;AAAA,WAItCC,EAJsC;AAAA,WAIlCC,EAJkC;;AAK7C,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AALsB,8BAOlB,KAAKZ,eAAL,CAAqBkC,MAArB,wBAPkB;AAAA;AAAA,WAOtCC,OAPsC;AAAA,WAO7BC,OAP6B;;AAQ7C,WAAI,CAACD,OAAL,EAAc;AAAE,gBAAOC,OAAP;AAAiB;;AAEjC,WAAMtF,MAAM,6DAAmC6C,OAAnC,4BACsCe,UADtC,yBAAZ;;AAIA,cAAO,KAAKnD,IAAL,CAAUK,IAAV,CAAed,GAAf,EAAoBoF,MAApB,CAAP;AACD;;AAED;;;;;;;;;;;;;;kCAWavC,O,EAASe,U,EAAYqB,Q,EAAuB;AAAA,WAAbG,MAAa,uEAAJ,EAAI;;AAAA,2BACtC,KAAKtC,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADsC;AAAA;AAAA,WAChDE,EADgD;AAAA,WAC5CC,EAD4C;;AAEvD,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAFgC,2BAItC,KAAKF,UAAL,CAAgBc,UAAhB,EAA4B,YAA5B,CAJsC;AAAA;AAAA,WAIhDC,EAJgD;AAAA,WAI5CC,EAJ4C;;AAKvD,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AALgC,2BAOtC,KAAKhB,UAAL,CAAgBmC,QAAhB,EAA0B,UAA1B,CAPsC;AAAA;AAAA,WAOhDC,EAPgD;AAAA,WAO5CC,EAP4C;;AAQvD,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AARgC,+BAU5B,KAAKjC,eAAL,CAAqBkC,MAArB,wBAV4B;AAAA;AAAA,WAUhDC,OAVgD;AAAA,WAUvCC,OAVuC;;AAWvD,WAAI,CAACD,OAAL,EAAc;AAAE,gBAAOC,OAAP;AAAiB;;AAEjC,WAAMtF,MAAM,6DAAmC6C,OAAnC,4BACsCe,UADtC,0BAEoCqB,QAFpC,CAAZ;;AAIA,cAAO,KAAKxE,IAAL,CAAU4C,KAAV,CAAgBrD,GAAhB,EAAqBoF,MAArB,CAAP;AACD;;AAED;;;;;;;;;;;;;;;mCAYcvC,O,EAASe,U,EAAYqB,Q,EAAuB;AAAA,WAAbG,MAAa,uEAAJ,EAAI;;AAAA,2BACvC,KAAKtC,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADuC;AAAA;AAAA,WACjDE,EADiD;AAAA,WAC7CC,EAD6C;;AAExD,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAFiC,2BAIvC,KAAKF,UAAL,CAAgBc,UAAhB,EAA4B,YAA5B,CAJuC;AAAA;AAAA,WAIjDC,EAJiD;AAAA,WAI7CC,EAJ6C;;AAKxD,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AALiC,2BAOvC,KAAKhB,UAAL,CAAgBmC,QAAhB,EAA0B,UAA1B,CAPuC;AAAA;AAAA,WAOjDC,EAPiD;AAAA,WAO7CC,EAP6C;;AAQxD,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AARiC,+BAU7B,KAAKjC,eAAL,CAAqBkC,MAArB,wBAV6B;AAAA;AAAA,WAUjDC,OAViD;AAAA,WAUxCC,OAVwC;;AAWxD,WAAI,CAACD,OAAL,EAAc;AAAE,gBAAOC,OAAP;AAAiB;;AAEjC,WAAMtF,MAAM,6DAAmC6C,OAAnC,4BACsCe,UADtC,0BAEoCqB,QAFpC,CAAZ;;AAIA,cAAO,KAAKxE,IAAL,CAAU6C,GAAV,CAActD,GAAd,EAAmBoF,MAAnB,CAAP;AACD;;AAED;;;;;;;;;;;+BAQUvC,O,EAASe,U,EAAYqB,Q,EAAU;AAAA,2BACtB,KAAKnC,UAAL,CAAgBD,OAAhB,EAAyB,SAAzB,CADsB;AAAA;AAAA,WAChCE,EADgC;AAAA,WAC5BC,EAD4B;;AAEvC,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAFgB,2BAItB,KAAKF,UAAL,CAAgBc,UAAhB,EAA4B,YAA5B,CAJsB;AAAA;AAAA,WAIhCC,EAJgC;AAAA,WAI5BC,EAJ4B;;AAKvC,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AALgB,2BAOtB,KAAKhB,UAAL,CAAgBmC,QAAhB,EAA0B,UAA1B,CAPsB;AAAA;AAAA,WAOhCC,EAPgC;AAAA,WAO5BC,EAP4B;;AAQvC,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAMnF,MAAM,6DAAmC6C,OAAnC,4BACsCe,UADtC,0BAEoCqB,QAFpC,CAAZ;AAGA,cAAO,KAAKxE,IAAL,CAAU8C,MAAV,CAAiBvD,GAAjB,CAAP;AACD;;;;;mBAzKkBgF,W;;;;;;;;;;;;ACnCrB;;mBAEe;AACb,cAAW,yCADE;AAEb,SAAM,GAFO;AAGb,WAAQ,QAHK;AAIb,iBAAc;AACZ,qBAAgB;AACd,aAAM,cADQ;AAEd,eAAQ;AAFM;AADJ,IAJD;AAUb,eAAY,CACV,cADU;AAVC,E;;;;;;;;;;;;ACFf;;mBAEe;AACb,cAAW,yCADE;AAEb,SAAM,GAFO;AAGb,WAAQ,QAHK;AAIb,iBAAc;AACZ,iBAAY;AACV,aAAM,UADI;AAEV,eAAQ;AAFE,MADA;AAKZ,iBAAY;AACV,aAAM,UADI;AAEV,eAAQ;AAFE,MALA;AASZ,oBAAe;AACb,aAAM,aADO;AAEb,eAAQ;AAFK,MATH;AAaZ,uBAAkB;AAChB,aAAM,gBADU;AAEhB,eAAQ;AAFQ,MAbN;AAiBZ,sBAAiB;AACf,aAAM,eADS;AAEf,eAAQ;AAFO,MAjBL;AAqBZ,wBAAmB;AACjB,aAAM,iBADW;AAEjB,eAAQ;AAFS,MArBP;AAyBZ,0BAAqB;AACnB,aAAM,mBADa;AAEnB,eAAQ;AAFW,MAzBT;AA6BZ,+BAA0B;AACxB,aAAM,wBADkB;AAExB,eAAQ;AAFgB,MA7Bd;AAiCZ,oBAAe;AACb,aAAM,aADO;AAEb,eAAQ;AAFK,MAjCH;AAqCZ,qBAAgB;AACd,aAAM,cADQ;AAEd,eAAQ;AAFM,MArCJ;AAyCZ,gBAAW;AACT,aAAM,SADG;AAET,eAAQ;AAFC,MAzCC;AA6CZ,kBAAa;AACX,aAAM,WADK;AAEX,eAAQ;AAFG,MA7CD;AAiDZ,cAAS;AACP,aAAM,OADC;AAEP,eAAQ;AAFD;AAjDG,IAJD;AA0Db,eAAY,CACV,UADU,EAEV,aAFU,EAGV,gBAHU,EAIV,mBAJU,EAKV,aALU,EAMV,SANU,EAOV,WAPU,EAQV,OARU;AA1DC,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFf;;;;AACA;;;;AACA;;;;AACA;;;;AAIA;AACA,KAAMhE,YAAY,UAAlB;;AAEA;AACA,KAAMuE,mBAAmB,UAAzB;;AAEA;AACA,KAAMC,0BAA0B,iBAAhC;;KAEqBC,O;;AAInB;;;;AAIA,oBAAYjE,MAAZ,EAAoBf,IAApB,EAA0B;AAAA;;AACxB;AACA,UAAKe,MAAL,GAAeA,UAAUA,sCAAX,GACZA,MADY,GACH,0BADX;;AAGA;AACA,SAAI,CAACf,IAAL,EAAW;AACT,aAAM,IAAIgB,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED;AACA,UAAKhB,IAAL,GAAYA,IAAZ;;AAEA;AACA,UAAKmB,MAAL;;AAEA;AACA,UAAKF,WAAL;AACD;;AAED;;;;;;;;;;;;;;;;;;AA3BA;;;;;uCA4CqD;AAAA;;AAAA,WAArCgE,OAAqC,uEAA3B,EAA2B;;AAAA,WAAvBC,OAAuB,uEAAb,KAAK/D,MAAQ;;AACnD,WAAIC,MAAM,CAAC,IAAD,CAAV;AACA,WAAMtB,QAAQ,KAAKmB,WAAL,CAAiBI,cAAjB,CAAgC4D,OAAhC,EAAyCC,OAAzC,CAAd;;AAEA,WAAIpF,MAAMwB,MAAN,GAAe,CAAnB,EAAsB;AAAA;AACpB,eAAMC,MAAM,MAAKvB,IAAL,CAAUwB,mBAAV,EAAZ;AACA1B,iBAAM2B,OAAN,CAAc,UAACC,GAAD,EAAS;AACrBH,iBAAII,GAAJ,CAAQC,IAAR,CAAaF,IAAIG,OAAjB;AACAN,iBAAIO,MAAJ,CAAWF,IAAX,CAAgB,MAAKX,WAAL,CAAiBc,mBAAjB,CAAqCL,GAArC,CAAhB;AACD,YAHD;AAIAN,iBAAM,CAAC,KAAD,EAAQ,kBAAQlB,MAAR,CAAe,MAAKF,IAAL,CAAUC,qBAAV,CAAgCsB,GAAhC,CAAf,CAAR,CAAN;AANoB;AAOrB;AACD,cAAOH,GAAP;AACD;;AAED;;;;;;;;;6BAMiB;AAAA,WAAX+D,IAAW,uEAAJ,EAAI;;AACf,WAAM5F,MAAM,oBAAQgB,SAAR,EAAmBuE,gBAAnB,EAAqCK,IAArC,CAAZ;AACA,cAAO,KAAKnF,IAAL,CAAUmC,GAAV,CAAc5C,GAAd,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;8BAeqB;AAAA,WAAd0F,OAAc,uEAAJ,EAAI;;AACnB;AADmB,8BAEF,KAAKG,eAAL,CAAqBH,OAArB,CAFE;AAAA;AAAA,WAEZI,EAFY;AAAA,WAERhC,EAFQ;;AAGnB,WAAI,CAACgC,EAAL,EAAS;AAAE,gBAAOhC,EAAP;AAAY;;AAEvB,WAAM9D,MAAM,oBAAQgB,SAAR,EAAmBuE,gBAAnB,CAAZ;AACA,cAAO,KAAK9E,IAAL,CAAUK,IAAV,CAAed,GAAf,EAAoB0F,OAApB,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;8BAgBgC;AAAA,WAAzBE,IAAyB,uEAAlB,EAAkB;AAAA,WAAdF,OAAc,uEAAJ,EAAI;;AAC9B;AACA,WAAMK,YAAY,yBAAU,KAAKnE,MAAf,CAAlB;AACA,cAAOmE,UAAUC,QAAjB,CAH8B,CAGH;;AAHG,+BAIb,KAAKH,eAAL,CAAqBH,OAArB,EAA8BK,SAA9B,CAJa;AAAA;AAAA,WAIvBD,EAJuB;AAAA,WAInBhC,EAJmB;;AAK9B,WAAI,CAACgC,EAAL,EAAS;AAAE,gBAAOhC,EAAP;AAAY;;AAEvB,WAAM9D,MAAM,oBAAQgB,SAAR,EAAmBuE,gBAAnB,EAAqCK,IAArC,CAAZ;AACA,cAAO,KAAKnF,IAAL,CAAU6C,GAAV,CAActD,GAAd,EAAmB0F,OAAnB,CAAP;AACD;;AAED;;;;;;;;;;;;yCAS8B;AAAA,WAAZlC,KAAY,uEAAJ,EAAI;;AAC5B,WAAMxD,MAAM,oBAAQgB,SAAR,EAAmBwE,uBAAnB,EAA4C,EAA5C,CAAZ;AACA,cAAO,KAAK/E,IAAL,CAAUK,IAAV,CAAed,GAAf,EAAoB,EAAEwD,YAAF,EAApB,CAAP;AACD;;AAED;;;;;;;;;;qCAOyC;AAAA,WAA3ByC,KAA2B,uEAAnB,EAAmB;AAAA,WAAfC,QAAe,uEAAJ,EAAI;;AACvC,WAAMlG,MAAM,oBAAQgB,SAAR,EAAmBwE,uBAAnB,EAA4CS,KAA5C,CAAZ;AACA,cAAO,KAAKxF,IAAL,CAAU6C,GAAV,CAActD,GAAd,EAAmB,EAAEiG,YAAF,EAASC,kBAAT,EAAnB,CAAP;AACD;;;;;AAlJkBT,Q,CAEZ1E,O,GAAU,U;mBAFE0E,O;;;;;;;;;;;;AChBrB;;mBAEe;AACb,cAAW,yCADE;AAEb,SAAM,GAFO;AAGb,WAAQ,QAHK;AAIb,iBAAc;AACZ,aAAQ;AACN,aAAM,MADA;AAEN,eAAQ;AAFF,MADI;AAKZ,cAAS;AACP,aAAM,OADC;AAEP,eAAQ;AAFD,MALG;AASZ,gBAAW;AACT,aAAM,SADG;AAET,eAAQ;AAFC,MATC;AAaZ,iBAAY;AACV,aAAM,UADI;AAEV,eAAQ;AAFE,MAbA;AAiBZ,mBAAc;AACZ,aAAM,YADM;AAEZ,eAAQ,QAFI;AAGZ,iBAAU;AAHE,MAjBF;AAsBZ,qBAAgB;AACd,aAAM,cADQ;AAEd,eAAQ,QAFM;AAGd,iBAAU;AAHI,MAtBJ;AA2BZ,oBAAe;AACb,aAAM,aADO;AAEb,eAAQ,CAAC,QAAD,EAAW,MAAX,CAFK;AAGb,iBAAU;AAHG,MA3BH;AAgCZ,kBAAa;AACX,aAAM,WADK;AAEX,eAAQ;AAFG,MAhCD;AAoCZ,mBAAc;AACZ,aAAM,YADM;AAEZ,eAAQ;AAFI,MApCF;AAwCZ,wBAAmB;AACjB,aAAM,iBADW;AAEjB,eAAQ;AAFS,MAxCP;AA4CZ,wBAAmB;AACjB,aAAM,iBADW;AAEjB,eAAQ;AAFS,MA5CP;AAgDZ,eAAU;AACR,aAAM,QADE;AAER,eAAQ,CAAC,SAAD,EAAY,MAAZ,CAFA;AAGR,kBAAW,CAHH;AAIR,kBAAW;AAJH,MAhDE;AAsDZ,uBAAkB;AAChB,aAAM,gBADU;AAEhB,eAAQ;AAFQ,MAtDN;AA0DZ,4BAAuB;AACrB,aAAM,qBADe;AAErB,eAAQ,CAAC,SAAD,EAAY,MAAZ,CAFa;AAGrB,kBAAW,CAHU;AAIrB,kBAAW;AAJU,MA1DX;AAgEZ,iBAAY;AACV,aAAM,UADI;AAEV,eAAQ;AAFE,MAhEA;AAoEZ,iBAAY;AACV,aAAM,UADI;AAEV,eAAQ;AAFE,MApEA;AAwEZ,mBAAc;AACZ,aAAM,YADM;AAEZ,eAAQ;AAFI,MAxEF;AA4EZ,oBAAe;AACb,aAAM,aADO;AAEb,eAAQ;AAFK,MA5EH;AAgFZ,iBAAY;AACV,aAAM,UADI;AAEV,eAAQ;AAFE,MAhFA;AAoFZ,iBAAY;AACV,aAAM,UADI;AAEV,eAAQ;AAFE,MApFA;AAwFZ,iBAAY;AACV,aAAM,UADI;AAEV,eAAQ;AAFE,MAxFA;AA4FZ,cAAS;AACP,aAAM,OADC;AAEP,eAAQ;AAFD,MA5FG;AAgGZ,gBAAW;AACT,aAAM,SADG;AAET,eAAQ;AAFC;AAhGC,IAJD;AAyGb,eAAY,CACV,OADU,EAEV,YAFU,EAGV,WAHU,EAIV,UAJU;AAzGC,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFf;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;AACA,KAAMU,qBAAqB,YAA3B;;AAEA;;;;;;;;;KAQqBC,S;;;;;;;;;;;;AAInB;;;;;;;;;;;4BAWgB;AAAA,WAAXxG,IAAW,uEAAJ,EAAI;;AACd,WAAME,SAAS,iBAAK,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,SAA1B,CAAL,EACE,KAAKe,cAAL,CAAoBjB,IAApB,CADF,CAAf;;AAGA;AACA,WAAI,gBAAIA,IAAJ,EAAU,MAAV,CAAJ,EAAuB;AAAEE,gBAAO8F,IAAP,GAAchG,KAAKgG,IAAnB;AAA0B;;AAEnD;AACA,WAAI,gBAAIhG,IAAJ,EAAU,SAAV,CAAJ,EAA0B;AAAEE,gBAAOC,OAAP,GAAiB,gBAAIH,KAAKG,OAAT,CAAjB;AAAqC;;AAEjE;AACA,WAAI,CAAC,gBAAID,MAAJ,EAAY,MAAZ,CAAL,EAA0B;AAAEA,gBAAO8F,IAAP,GAAclD,SAAd;AAA0B;;AAEtD,WAAM1C,MAAM,oBAAQ,KAAKC,SAAb,EAAwBkG,kBAAxB,CAAZ;AACA,cAAO,KAAKjG,eAAL,CAAqBF,GAArB,EAA0BF,MAA1B,CAAP;AACD;;AAED;;;;;;;AA/BA;;;;qCAqCuB;AAAA,WAATK,EAAS,uEAAJ,EAAI;;AACrB;AADqB,yBAEF,KAAK2C,UAAL,CAAgB3C,EAAhB,CAFE;AAAA;AAAA,WAEdkG,GAFc;AAAA,WAETC,GAFS;;AAGrB,WAAI,CAACD,GAAL,EAAU;AAAE,gBAAOC,GAAP;AAAa;;AAEzB,WAAMtG,MAAM,oBAAQ,KAAKC,SAAb,EAAwBkG,kBAAxB,EAA4ChG,EAA5C,EAAgD,WAAhD,CAAZ;AACA,cAAO,KAAKD,eAAL,CAAqBF,GAArB,CAAP;AACD;;AAED;;;;;;;;;6BAMe;AAAA,WAATG,EAAS,uEAAJ,EAAI;;AACb;AADa,0BAEM,KAAK2C,UAAL,CAAgB3C,EAAhB,CAFN;AAAA;AAAA,WAENkG,GAFM;AAAA,WAEDC,GAFC;;AAGb,WAAI,CAACD,GAAL,EAAU;AAAE,gBAAOC,GAAP;AAAa;;AAEzB,WAAMtG,MAAM,oBAAQ,KAAKC,SAAb,EAAwBkG,kBAAxB,EAA4ChG,EAA5C,CAAZ;AACA,cAAO,KAAKD,eAAL,CAAqBF,GAArB,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;8BAoBuB;AAAA,WAAhBuG,SAAgB,uEAAJ,EAAI;;AACrB,WAAMC,aAAa,KAAK3F,cAAL,CAAoB0F,SAApB,CAAnB;AACA,WAAME,iBAAiB,KAAKnG,eAAL,CAAqBkG,UAArB,sBAAvB;;AAEA;AACA,WAAIC,eAAelG,KAAf,KAAyB,KAA7B,EAAoC;AAClC,aAAMC,WAAW,KAAKC,IAAL,CAAUC,qBAAV,CAAgC+F,cAAhC,CAAjB;AACA,gBAAO,kBAAQ9F,MAAR,CAAeH,QAAf,CAAP;AACD;;AAED,WAAMR,MAAM,oBAAQ,KAAKC,SAAb,EAAwBkG,kBAAxB,CAAZ;AACA,cAAO,KAAK1F,IAAL,CAAUK,IAAV,CAAed,GAAf,EAAoBwG,UAApB,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;2BAiBsB;AAAA,WAAlBrG,EAAkB,uEAAb,EAAa;;AAAA,yCAANuG,IAAM;AAANA,aAAM;AAAA;;AACpB,WAAMC,OAAO,aAAMC,KAAN,CAAY,IAAZ,EAAkBF,IAAlB,CAAb;;AAEA;;AAHoB,0BAID,KAAK5D,UAAL,CAAgB3C,EAAhB,CAJC;AAAA;AAAA,WAIbkG,GAJa;AAAA,WAIRC,GAJQ;;AAKpB,WAAI,CAACD,GAAL,EAAU;AAAE,gBAAOC,GAAP;AAAa;;AAEzB,WAAMtG,MAAM,oBAAQ,KAAKC,SAAb,EAAwBkG,kBAAxB,EAA4ChG,EAA5C,CAAZ;AACA,cAAO,KAAKM,IAAL,CAAU6C,GAAV,CAActD,GAAd,EAAmB,EAAE6G,SAASF,IAAX,EAAnB,CAAP;AACD;;AAED;;;;;;;;;;;;;yBAUIxG,E,EAAkB;AAAA,WAAd2G,OAAc,uEAAJ,EAAI;;AACpB;AADoB,0BAED,KAAKhE,UAAL,CAAgB3C,EAAhB,CAFC;AAAA;AAAA,WAEbkG,GAFa;AAAA,WAERC,GAFQ;;AAGpB,WAAI,CAACD,GAAL,EAAU;AAAE,gBAAOC,GAAP;AAAa;;AAEzB,WAAMS,WAAW,KAAKlG,cAAL,CAAoBiG,OAApB,CAAjB;;AAEA;;AAPoB,6BAQH,KAAKhF,cAAL,CAAoBiF,QAApB,yBARG;AAAA;AAAA,WAQbC,EARa;AAAA,WAQTC,EARS;;AASpB,WAAI,CAACD,EAAL,EAAS;AAAE,gBAAOC,EAAP;AAAY;;AAEvB,WAAMjH,MAAM,oBAAQ,KAAKC,SAAb,EACQkG,kBADR,EAEQhG,EAFR,EAGQ,WAHR,CAAZ;;AAKA,cAAO,KAAKM,IAAL,CAAUK,IAAV,CAAed,GAAf,EAAoB+G,QAApB,CAAP;AACD;;;;;AAvJkBX,U,CAEZrF,O,GAAU,Y;mBAFEqF,S;;;;;;;;;;;;AChBrB;;mBAEe;AACb,cAAW,yCADE;AAEb,SAAM,GAFO;AAGb,WAAQ,QAHK;AAIb,iBAAc;AACZ,eAAU;AACR,aAAM,QADE;AAER,eAAQ;AAFA,MADE;AAKZ,iBAAY;AACV,aAAM,UADI;AAEV,eAAQ;AAFE,MALA;AASZ,kBAAa;AACX,aAAM,WADK;AAEX,eAAQ;AAFG,MATD;AAaZ,aAAQ;AACN,aAAM,MADA;AAEN,eAAQ;AAFF,MAbI;AAiBZ,mBAAc;AACZ,aAAM,YADM;AAEZ,eAAQ;AAFI,MAjBF;AAqBZ,iBAAY;AACV,aAAM,UADI;AAEV,eAAQ;AAFE,MArBA;AAyBZ,aAAQ;AACN,aAAM,MADA;AAEN,eAAQ;AAFF,MAzBI;AA6BZ,cAAS;AACP,aAAM,OADC;AAEP,eAAQ;AAFD,MA7BG;AAiCZ,YAAO;AACL,aAAM,KADD;AAEL,eAAQ;AAFH,MAjCK;AAqCZ,gBAAW;AACT,aAAM,SADG;AAET,eAAQ;AAFC,MArCC;AAyCZ,cAAS;AACP,aAAM,OADC;AAEP,eAAQ;AAFD,MAzCG;AA6CZ,cAAS;AACP,aAAM,OADC;AAEP,eAAQ;AAFD,MA7CG;AAiDZ,iBAAY;AACV,aAAM,UADI;AAEV,eAAQ;AAFE,MAjDA;AAqDZ,mBAAc;AACZ,aAAM,YADM;AAEZ,eAAQ;AAFI,MArDF;AAyDZ,cAAS;AACP,aAAM,OADC;AAEP,eAAQ;AAFD,MAzDG;AA6DZ,mBAAc;AACZ,aAAM,YADM;AAEZ,eAAQ;AAFI,MA7DF;AAiEZ,kBAAa;AACX,aAAM,WADK;AAEX,eAAQ;AAFG,MAjED;AAqEZ,cAAS;AACP,aAAM,OADC;AAEP,eAAQ;AAFD,MArEG;AAyEZ,qBAAgB;AACd,aAAM,cADQ;AAEd,eAAQ;AAFM;AAzEJ,IAJD;AAkFb,eAAY,CACV,UADU,EAEV,cAFU,EAGV,OAHU,EAIV,YAJU,EAKV,WALU,EAMV,OANU,EAOV,MAPU,EAQV,SARU,EASV,OATU,EAUV,UAVU,EAWV,YAXU,EAYV,WAZU,EAaV,MAbU,EAcV,YAdU,EAeV,OAfU,EAgBV,OAhBU,EAiBV,KAjBU;AAlFC,E;;;;;;;;;;;;ACFf;;mBAEe;AACb,cAAW,yCADE;AAEb,SAAM,GAFO;AAGb,WAAQ,QAHK;AAIb,iBAAc;AACZ,eAAU;AACR,aAAM,QADE;AAER,eAAQ;AAFA,MADE;AAKZ,iBAAY;AACV,aAAM,UADI;AAEV,eAAQ;AAFE,MALA;AASZ,aAAQ;AACN,aAAM,MADA;AAEN,eAAQ;AAFF,MATI;AAaZ,sBAAiB;AACf,aAAM,eADS;AAEf,eAAQ;AAFO,MAbL;AAiBZ,sBAAiB;AACf,aAAM,eADS;AAEf,eAAQ;AAFO,MAjBL;AAqBZ,aAAQ;AACN,aAAM,MADA;AAEN,eAAQ;AAFF;AArBI,IAJD;AA8Bb,eAAY,CACV,QADU,EAEV,MAFU;AA9BC,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFf;;;;AACA;;;;AACA;;;;AAEA;AACA,KAAMc,wBAAwB,eAA9B;;AAEA;;;;;;;;;KAQqBC,Y;;;;;;;;;;;;AAInB;;;;;;;;;;;4BAWgB;AAAA,WAAXvH,IAAW,uEAAJ,EAAI;;AACd,WAAME,SAAS,iBAAK,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,SAA1B,CAAL,EACE,KAAKe,cAAL,CAAoBjB,IAApB,CADF,CAAf;;AAGA;AACA,WAAI,gBAAIA,IAAJ,EAAU,MAAV,CAAJ,EAAuB;AAAEE,gBAAO8F,IAAP,GAAchG,KAAKgG,IAAnB;AAA0B;;AAEnD;AACA,WAAI,gBAAIhG,IAAJ,EAAU,SAAV,CAAJ,EAA0B;AAAEE,gBAAOC,OAAP,GAAiB,gBAAIH,KAAKG,OAAT,CAAjB;AAAqC;;AAEjE;AACA,WAAI,CAAC,gBAAID,MAAJ,EAAY,MAAZ,CAAL,EAA0B;AAAEA,gBAAO8F,IAAP,GAAclD,SAAd;AAA0B;;AAEtD,WAAM1C,MAAM,oBAAQ,KAAKC,SAAb,EAAwBiH,qBAAxB,CAAZ;AACA,cAAO,KAAKhH,eAAL,CAAqBF,GAArB,EAA0BF,MAA1B,CAAP;AACD;;AAED;;;;;;;AA/BA;;;;qCAqCuB;AAAA,WAATK,EAAS,uEAAJ,EAAI;;AACrB;AADqB,yBAEF,KAAK2C,UAAL,CAAgB3C,EAAhB,CAFE;AAAA;AAAA,WAEdkG,GAFc;AAAA,WAETC,GAFS;;AAGrB,WAAI,CAACD,GAAL,EAAU;AAAE,gBAAOC,GAAP;AAAa;;AAEzB,WAAMtG,MAAM,oBAAQ,KAAKC,SAAb,EAAwBiH,qBAAxB,EAA+C/G,EAA/C,EAAmD,WAAnD,CAAZ;AACA,cAAO,KAAKD,eAAL,CAAqBF,GAArB,CAAP;AACD;;AAED;;;;;;;;;6BAMe;AAAA,WAATG,EAAS,uEAAJ,EAAI;;AACb;AADa,0BAEM,KAAK2C,UAAL,CAAgB3C,EAAhB,CAFN;AAAA;AAAA,WAENkG,GAFM;AAAA,WAEDC,GAFC;;AAGb,WAAI,CAACD,GAAL,EAAU;AAAE,gBAAOC,GAAP;AAAa;;AAEzB,WAAMtG,MAAM,oBAAQ,KAAKC,SAAb,EAAwBiH,qBAAxB,EAA+C/G,EAA/C,CAAZ;AACA,cAAO,KAAKD,eAAL,CAAqBF,GAArB,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;8BAkB0B;AAAA,WAAnBoH,YAAmB,uEAAJ,EAAI;;AACxB;AADwB,+BAEO,KAAKC,gBAAL,CAAsBD,aAAaE,QAAnC,CAFP;AAAA;AAAA,WAEjBC,SAFiB;AAAA,WAENC,SAFM;;AAGxB,WAAI,CAACD,SAAL,EAAgB;AAAE,gBAAOC,SAAP;AAAmB;;AAErC,WAAMC,oBAAoB,KAAKnH,eAAL,CAAqB8G,YAArB,qBAA1B;;AAEA;AACA,WAAIK,kBAAkBlH,KAAlB,KAA4B,KAAhC,EAAuC;AACrC,aAAMC,WAAW,KAAKC,IAAL,CAAUC,qBAAV,CAAgC+G,iBAAhC,CAAjB;AACA,gBAAO,kBAAQ9G,MAAR,CAAeH,QAAf,CAAP;AACD;;AAED,WAAMkH,gBAAgB,KAAK7G,cAAL,CAAoBuG,YAApB,CAAtB;AACA,WAAMpH,MAAM,oBAAQ,KAAKC,SAAb,EAAwBiH,qBAAxB,CAAZ;AACA,cAAO,KAAKzG,IAAL,CAAUK,IAAV,CAAed,GAAf,EAAoB0H,aAApB,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;2BAmBsB;AAAA,WAAlBvH,EAAkB,uEAAb,EAAa;;AACpB;AADoB,0BAED,KAAK2C,UAAL,CAAgB3C,EAAhB,CAFC;AAAA;AAAA,WAEbkG,GAFa;AAAA,WAERC,GAFQ;;AAGpB,WAAI,CAACD,GAAL,EAAU;AAAE,gBAAOC,GAAP;AAAa;;AAHL,yCAANI,IAAM;AAANA,aAAM;AAAA;;AAKpB,WAAMC,OAAO,aAAMC,KAAN,CAAY,IAAZ,EAAkBF,IAAlB,CAAb;AACA,WAAM1G,MAAM,oBAAQ,KAAKC,SAAb,EAAwBiH,qBAAxB,EAA+C/G,EAA/C,CAAZ;AACA,cAAO,KAAKM,IAAL,CAAU6C,GAAV,CAActD,GAAd,EAAmB,EAAE2H,WAAWhB,IAAb,EAAnB,CAAP;AACD;;AAED;;;;;;;;;;kCAOaxG,E,EAAIyH,M,EAAQ;AACvB;AACA,WAAMC,YAAYC,OAAOF,MAAP,CAAlB;;AAFuB,0BAGJ,KAAK9E,UAAL,CAAgB3C,EAAhB,CAHI;AAAA;AAAA,WAGhBkG,GAHgB;AAAA,WAGXC,GAHW;;AAIvB,WAAI,CAACD,GAAL,EAAU;AAAE,gBAAOC,GAAP;AAAa;;AAJF,0BAMI,KAAKyB,WAAL,CAAiBH,MAAjB,EAAyB,QAAzB,CANJ;AAAA;AAAA,WAMhBI,OANgB;AAAA,WAMPC,OANO;;AAOvB,WAAI,CAACD,OAAL,EAAc;AAAE,gBAAOC,OAAP;AAAiB;;AAEjC,WAAMjI,MAAM,oBAAQ,KAAKC,SAAb,EAAwBiH,qBAAxB,EAA+C/G,EAA/C,CAAZ;AACA,cAAO,KAAKM,IAAL,CAAU6C,GAAV,CAActD,GAAd,EAAmB,EAAE4H,QAAQC,SAAV,EAAnB,CAAP;AACD;;;;;AAjJkBV,a,CAEZpG,O,GAAU,e;mBAFEoG,Y;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfrB;;;;AACA;;;;AACA;;AAEA;;;;;;AAEA;AACA,KAAMnG,YAAY,QAAlB;;AAEA;AACA,KAAMkH,sBAAsB,YAA5B;;AAEA;;;;;KAIqBC,S;;AAInB;;;;AAIA,sBAAY3G,MAAZ,EAAoBf,IAApB,EAA0B;AAAA;;AACxB;AACA,UAAKe,MAAL,GAAeA,UAAUA,sCAAX,GACZA,MADY,GACH,0BADX;;AAGA;AACA,SAAI,CAACf,IAAL,EAAW;AACT,aAAM,IAAIgB,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED;AACA,UAAKhB,IAAL,GAAYA,IAAZ;;AAEA;AACA,UAAKmB,MAAL;;AAEA;AACA,UAAKF,WAAL;AACD;;AAED;;;;;;;;;;;;;;;;;AA3BA;;;;;oCA2CwB;AAAA;;AAAA,WAAX0G,IAAW,uEAAJ,EAAI;;AACtB,WAAIvG,MAAM,CAAC,IAAD,CAAV;AACA,WAAMtB,QAAQ,KAAKmB,WAAL,CAAiBI,cAAjB,CAAgCsG,IAAhC,EAAsC,KAAKxG,MAA3C,CAAd;;AAEA,WAAIrB,MAAMwB,MAAN,GAAe,CAAnB,EAAsB;AAAA;AACpB,eAAMC,MAAM,MAAKvB,IAAL,CAAUwB,mBAAV,EAAZ;AACA1B,iBAAM2B,OAAN,CAAc,UAACC,GAAD,EAAS;AACrBH,iBAAII,GAAJ,CAAQC,IAAR,CAAaF,IAAIG,OAAjB;AACAN,iBAAIO,MAAJ,CAAWF,IAAX,CAAgB,MAAKX,WAAL,CAAiBc,mBAAjB,CAAqCL,GAArC,CAAhB;AACD,YAHD;AAIAN,iBAAM,CAAC,KAAD,EAAQ,kBAAQlB,MAAR,CAAe,MAAKF,IAAL,CAAUC,qBAAV,CAAgCsB,GAAhC,CAAf,CAAR,CAAN;AANoB;AAOrB;AACD,cAAOH,GAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;8BAekB;AAAA,WAAXuG,IAAW,uEAAJ,EAAI;;AAChB;AADgB,2BAEC,KAAKC,YAAL,CAAkBD,IAAlB,CAFD;AAAA;AAAA,WAETtC,EAFS;AAAA,WAELhC,EAFK;;AAGhB,WAAI,CAACgC,EAAL,EAAS;AAAE,gBAAOhC,EAAP;AAAY;;AAEvB,WAAM9D,MAAM,oBAAQgB,SAAR,CAAZ;AACA,cAAO,KAAKP,IAAL,CAAUK,IAAV,CAAed,GAAf,EAAoBoI,IAApB,CAAP;AACD;;AAED;;;;;;;;;;;;;4BAUgB;AAAA,WAAXxI,IAAW,uEAAJ,EAAI;;AACd,WAAM+C,QAAQ,iBAAK,CAAC,MAAD,EAAS,SAAT,CAAL,EAA0B/C,IAA1B,CAAd;AACA,cAAO,KAAKa,IAAL,CAAUmC,GAAV,CAAc,oBAAQ5B,SAAR,EAAmBkH,mBAAnB,CAAd,EACc,EAAEpI,QAAQ6C,KAAV,EADd,CAAP;AAED;;;;;AAjGkBwF,U,CAEZpH,O,GAAU,Y;mBAFEoH,S;;;;;;;;;;;;AChBrB;;mBAEe;AACb,cAAW,yCADE;AAEb,SAAM,GAFO;AAGb,WAAQ,QAHK;AAIb,iBAAc;AACZ,iBAAY;AACV,aAAM,UADI;AAEV,eAAQ;AAFE,MADA;AAKZ,iBAAY;AACV,aAAM,UADI;AAEV,eAAQ;AAFE,MALA;AASZ,aAAQ;AACN,aAAM,MADA;AAEN,eAAQ;AAFF,MATI;AAaZ,gBAAW;AACT,aAAM,SADG;AAET,eAAQ;AAFC,MAbC;AAiBZ,cAAS;AACP,aAAM,OADC;AAEP,eAAQ;AAFD,MAjBG;AAqBZ,mBAAc;AACZ,aAAM,YADM;AAEZ,eAAQ;AAFI,MArBF;AAyBZ,mBAAc;AACZ,aAAM,YADM;AAEZ,eAAQ;AAFI,MAzBF;AA6BZ,kBAAa;AACX,aAAM,WADK;AAEX,eAAQ;AAFG,MA7BD;AAiCZ,mBAAc;AACZ,aAAM,YADM;AAEZ,eAAQ;AAFI,MAjCF;AAqCZ,eAAU;AACR,aAAM,QADE;AAER,eAAQ;AAFA,MArCE;AAyCZ,cAAS;AACP,aAAM,OADC;AAEP,eAAQ;AAFD,MAzCG;AA6CZ,aAAQ;AACN,aAAM,MADA;AAEN,eAAQ,QAFF;AAGN,qBAAc;AAHR;AA7CI,IAJD;AAuDb,eAAY;AAvDC,E;;;;;;;;;;;;;ACFf;;;;;;AAEA,UAASG,iBAAT,CAA2BC,QAA3B,EAAqC;AACnC,UAAO,SAASC,MAAT,CAAgB5I,IAAhB,EAAsB;AAC3B,YAAO,yBAAe2I,QAAf,EAAyB3I,IAAzB,CAAP;AACD,IAFD;AAGD;;mBAEc0I,iB;;;;;;;;;ACRf;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,KAAMG,aAAa,iCAAkB,0HAAlB,CAAnB;;AASAC,QAAOC,OAAP,GAAiBF,UAAjB,C","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Groundwork\"] = factory();\n\telse\n\t\troot[\"Groundwork\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","import Payment from './Payment';\nimport schema from './schema/donation';\nimport { max, only, urlJoin } from './utils';\n\n/** @type {String} - API endpoint for resource */\nconst ENDPOINT_DONATION = 'donations';\n\n/**\n * Create and view donations\n *\n * list(opts) - get a filtered list of donations\n * create(donation) - create a new donation\n * fetch(id) - fetch a donation object\n *\n */\nexport default class Donation extends Payment {\n  /** @type {String} */\n  static service = 'donations';\n\n  /**\n   * Fetch a collection of Donation objects, filtering on gwid, subscription,\n   * quickCard and email.\n   *\n   * @param {Object} opts\n   * @param {String} [opts.gwid] - gwid to filter on\n   * @param {String} [opts.subscription] - sub id to filter on\n   * @param {String} [opts.quickCard] - quickcard id to filter on\n   * @param {String} [opts.email] - email to filter on\n   * @param {Number} [opts.page] - page number\n   * @param {Number} [opts.perPage] - donations per page\n   * @return {Promise}\n   */\n  list(opts = {}) {\n    const whitelist = ['gwid', 'subscription', 'quickCard', 'email', 'page',\n                     'perPage'];\n\n    const params = only(whitelist, opts);\n    if (params.perPage) {\n      params.perPage = max(params.perPage); // Max of 50\n    }\n\n    const url = urlJoin(this.namespace, ENDPOINT_DONATION);\n    return this.fetchCollection(url, params);\n  }\n\n  /**\n   * Fetch a single Donation object\n   *\n   * @param {String} id - donation id\n   * @return {Promise}\n   */\n  fetch(id = '') {\n    const url = urlJoin(this.namespace, ENDPOINT_DONATION, id);\n    return this.fetchCollection(url);\n  }\n\n  /**\n   * POST a donation record to the API\n   *\n   * The passed in form object will be validated. If it fails, a mock response\n   * with any errors will be sent back in a rejected Promise. This is to present\n   * the least amount of surprise to the developer.\n   *\n   * Note: All of the values in the object passed to the method should have had\n   * their types coerced already or validation will fail.\n   *\n   * @example\n   * // validation fail\n   * supporter.create({}).catch((err) => console.log(err));\n   * // => { status: 400, data: { error: { valid: false, ... } } ... }\n   *\n   * @param {Object} [donation]\n   * @return {Promise}\n   */\n  create(donation = {}) {\n    const checkDonation = this.validatePayment(donation, schema);\n\n    // Return a mock error response with validation errors\n    if (checkDonation.valid === false) {\n      const response = this.http.generateErrorResponse(checkDonation);\n      return Promise.reject(response);\n    }\n\n    const _donation = this.attachIdentity(donation);\n    const url = urlJoin(this.namespace, ENDPOINT_DONATION);\n    return this.http.post(url, _donation);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Donation.js\n **/","import Dictionary from './Dictionary';\nimport SchemaUtils from './SchemaUtils';\nimport EventCategory from './EventCategory';\nimport EventInvitation from './EventInvitation';\nimport EventMessage from './EventMessage';\nimport EventTicket from './EventTicket';\nimport eventSchema from './schema/event';\nimport { mixin, only, urlJoin, validEmail } from './utils';\n\n/** @type {String} - API endpoint for resource */\nexport const NAMESPACE = 'events';\n\n/** @type {String} - API endpoint for event resource */\nexport const ENDPOINT_EVENT = 'events';\n\n/** @type {String} - API endpoint for category resource */\nexport const ENDPOINT_CATEGORY = 'categories';\n\n/** @type {String} - API endpoint for invitation resource */\nexport const ENDPOINT_INVITATION = 'invitations';\n\n/** @type {String} - API endpoint for message resource */\nexport const ENDPOINT_MESSAGE = 'messages';\n\n/** @type {String} - API endpoint for ticket resource */\nexport const ENDPOINT_TICKET = 'tickets';\n\n/** @type {String} - API endpoint for unsubscribing an email address */\nexport const ENDPOINT_HOST_UNSUBSCRIBE = 'host-unsubscribe';\n\n/**\n * An Event is a time and a place of an event. It also encompasses an event's\n * title and description.\n *\n * @example\n * const gw = new Groundwork({...});\n *\n * // List all events, while passing in an optional config\n * gw.events.list({ page: 2, perPage: 10 })\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.fetch(<event id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * // Create a new event with required properties\n * const eventProps = {\n *   address1: '641 Walnut St.',\n *   addressCity: 'Cincinnati',\n *   addressCountry: 'USA',\n *   addressPostalCode: '45202',\n *   addressStateOrProvince: 'Ohio',\n *   description: 'Come watch the Democratic and Republican candidates debate!',\n *   locationName: 'The Righteous Room',\n *   timeEnd: '2016-09-26T15:00:00',\n *   timeStart: '2016-09-26T12:00:00',\n *   title: 'Debate Watch Party at The Righteous Room'\n * };\n *\n * gw.events.create(eventProps)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.update({ description: 'updated description' })\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.replace({...})\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.delete(<event id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * // If authenticated, list all tickets across all events,\n * gw.events.listAllTickets({...})\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(error))\n *\n * gw.events.unsubscribe(<email>, <invitationId>)\n * \t .then((response) => console.log(response))\n * \t .catch((err) => console.error(err))\n */\nclass Event {\n  /** @type {String} */\n  static service = 'events';\n\n  /**\n   * @param {Dictionary} [config] - configuration dictionary\n   * @param {Http} http - Http instance\n   */\n  constructor(config, http) {\n    /** @type {Dictionary} */\n    this.config = (config && config instanceof Dictionary) ?\n      config : new Dictionary();\n\n    // Resource must have an Http instance\n    if (!http) {\n      throw new Error('Event requires Http');\n    }\n\n    /** @type {Http} */\n    this.http = http;\n\n    /** @type {SchemaUtils} */\n    this.schemaUtils = SchemaUtils;\n  }\n\n  /**\n   * Validate a payload against a schema. If it fails then return a tuple\n   * with a rejected Promise containing an error message.\n   *\n   * @param {Object} [payload]\n   * @param {Object} schema\n   * @return {Array}\n   */\n  validatePayload(payload = {}, schema) {\n    let out = [true];\n    const valid = this.schemaUtils.validateSchema(payload, schema);\n\n    if (valid.length > 0) {\n      const ret = this.http.generateErrorObject();\n      valid.forEach((err) => {\n        ret.msg.push(err.message);\n        ret.fields.push(this.schemaUtils.extractFieldByError(err));\n      });\n      out = [false, Promise.reject(this.http.generateErrorResponse(ret))];\n    }\n    return out;\n  }\n\n  /**\n   * If a specific function argument is missing then send back a tuple with a\n   * rejected Promise containing an error message.\n   *\n   * @param {*} id - value to check\n   * @param {String} [name] - name of argument being checked\n   * @return {Array}\n   */\n  validateId(id, name = '') {\n    let out = [true];\n\n    if (typeof id !== 'string' || id === null || id === undefined || id === false) {\n      const response = this.http.generateErrorResponse({\n        valid: false,\n        fields: [name],\n        msg: [`Invalid ID: ${name}`]\n      });\n      out = [false, Promise.reject(response)];\n    }\n\n    return out;\n  }\n\n  /**\n   * List all Events\n   *\n   * @param {Object} [opts] - options object\n   * @param {Array|String} [opts.hostGwid] -\n   *   The GWID String of the user who is hosting the event. Only events with the given\n   *   hostGwid will be returned. You may also pass multiple hostGwid's in an array\n   *   include multiple hosts in your request\n   * @param {Boolean} [opts.isDeleted] -\n   *   a Boolean of whether to only return Events that have been deleted. Defaults to\n   *   False. This option is currently only available to Admin users\n   * @param {Number} [opts.latitude] -\n   *   a numeric Float of a latitudinal geographic coordinate by which to filter results.\n   *   This parameter must be provided if performing a geographic filter\n   * @param {Number} [opts.longitude] -\n   *   a numeric Float of a longitudinal geographic coordinate by which to filter results.\n   *   This parameter must be provided if performing a geographic filter\n   * @param {Number} [opts.page] -\n   *   an Integer indicating which page of results should be returned\n   * @param {Number} [opts.perPage] -\n   *   an Integer indicating how many results should be returned per request\n   * @param {Number} [opts.radius] -\n   *   a numeric Float, given in kilometers, of the search radius by with to filter results.\n   *   This parameter must be provided if performing a geographic filter.\n   * @param {String} [opts.search] - a String search field that will query Event titles.\n   * @param {String} [opts.startsBefore] -\n   *   an ISO-8601 formatted String given in local time without a timezone designator.\n   *   Only events occuring before the given timestamp will be returned.\n   * @param {String} [opts.startsAfter] -\n   *   an ISO-8601 formatted String given in local time without a timezone designator.\n   *   Only events occuring after the given timestamp will be returned.\n   * @return {Promise}\n   */\n  list(opts = {}) {\n    const _opts = only(['hostGwid', 'isDeleted', 'latitude', 'longitude', 'page',\n                        'perPage', 'radius', 'search', 'startsBefore',\n                        'startsAfter'], opts);\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT);\n    return this.http.get(url, { params: _opts });\n  }\n\n  /**\n   * Get a specific Event, by id\n   *\n   * @param  {String} eventId - id of event\n   * @return {Promise}\n   */\n  fetch(eventId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId);\n    return this.http.get(url);\n  }\n\n  /**\n   * Create an Event\n   *\n   * The provided address will be geocoded to discover timezone information. If the\n   * geocode fails, the request will fail and the Event will not be created.\n   *\n   * @param  {Object} [event] - event object\n   * @return {Promise}\n   */\n  create(event = {}) {\n    const [eventv, eventp] = this.validatePayload(event, eventSchema);\n    if (!eventv) { return eventp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT);\n    return this.http.post(url, event);\n  }\n\n  /**\n   * Update an existing Event, by id\n   *\n   * Only the fields that are passed will be updated.\n   *\n   * If the address field is modified in full or in part, it will be re-geocoded to\n   * update timezone information. If the geocode fails, the request will fail and the\n   * Event will not be modified.\n   *\n   * @param  {String} eventId - id of event\n   * @param  {Object} [event] - fields to update\n   * @return {Promise}\n   */\n  update(eventId, event = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId);\n    return this.http.patch(url, event);\n  }\n\n  /**\n   * Replace an existing Event, by id\n   *\n   * All fields are updated. If an optional field is not provided, it will be overwritten\n   * as blank unless otherwise noted.\n   *\n   * If the address field is modified in full or in part, it will be re-geocoded to\n   * update timezone information. If the geocode fails, the request will fail and the\n   * Event will not be modified.\n   *\n   * @param  {String} eventId - id of event\n   * @param  {Object} [event] - fields to update\n   * @return {Promise}\n   */\n  replace(eventId, event = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [eventv, eventp] = this.validatePayload(event, eventSchema);\n    if (!eventv) { return eventp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId);\n    return this.http.put(url, event);\n  }\n\n  /**\n   * Delete a specific Event, by id\n   *\n   * If there are Tickets associated with any Categories under that event, the request\n   * will fail.\n   *\n   * @param  {String} eventId - id of event\n   * @return {Promise}\n   */\n  del(eventId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId);\n    return this.http.delete(url);\n  }\n\n  /**\n   * Get a list of all Tickets. When called by an authenticated user, it will return all\n   * Tickets that have that user as that `purchaserGwid`. When called by an Admin, it\n   * will return all tickets. Both responses are filterable with the optional query\n   * paramters.\n   *\n   * @param {Object} [opts] - options object\n   * @param {Boolean} [opts.isRedeemed] -\n   *   a Boolean representing whether the ticket has been redeemed. Only tickets with\n   *   the given redemption status will be returned.\n   * @param {Number} [opts.page] -\n   *   an Integer indicating which page of results should be returned\n   * @param {Number} [opts.perPage] -\n   *   an Integer indicating how many results should be returned per request\n   * @param {String} [opts.purchaserGwid] -\n   *   is the GWID String of the user who purchased the tickets. Only tickets with the\n   *   given purchaser will be returned.\n   * @param {String} [opts.startsBefore] -\n   *   an ISO-8601 formatted String given in local time without a timezone designator.\n   *   Only tickets in categories occurring before the given timestamp will be returned\n   * @param {String} [opts.startsAfter] -\n   *   an ISO-8601 formatted String given in local time without a timezone designator.\n   *   Only tickets in categories occurring after the given timestamp will be returned.\n   * @return {Promise}\n   */\n  listAllTickets(opts = {}) {\n    const _opts = only(['isRedeemed', 'page', 'perPage', 'purchaserGwid',\n                        'startsBefore', 'startsAfter'], opts);\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_TICKET);\n    return this.http.get(url, { params: _opts });\n  }\n\n  /**\n   * Unsubscribe an email address from all communication from a specific Event host.\n   *\n   * @param  {String} email - email address that wishes to unsubscribe\n   * @param  {Object} [opts] - unsubscribe options\n   * @param  {Object} [opts.invitationId] -\n   *   UUID String unique identifier of the Invitation that triggered the\n   *   unsubscribe request\n   * @param  {Object} [opts.messageId] -\n   *   UUID String unique identifier of the Message that triggered the\n   *   unsubscribe request\n   * @return {[type]}\n   */\n  unsubscribe(email, opts = {}) {\n    const valid = validEmail(email) && (typeof opts === 'object');\n\n    if (!valid) {\n      const response = this.http.generateErrorResponse({\n        valid: false,\n        fields: ['email', 'opts'],\n        msg: [`Valid \\`email\\` and \\`opts\\` are required. Passed email (${email}).\n               and opts (${opts})`]\n      });\n\n      return Promise.reject(response);\n    }\n\n    const { invitationId, messageId } = opts;\n\n    // Only allow users to use one type of ID to unsubscribe, not both\n    if (invitationId && messageId) {\n      const response = this.http.generateErrorResponse({\n        valid: false,\n        fields: ['invitationId', 'messageId'],\n        msg: ['Must unsubscribe via `invitationId` or `messageId`, not both.']\n      });\n\n      return Promise.reject(response);\n    }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_HOST_UNSUBSCRIBE);\n    return this.http.get(url, { params: { email, invitationId, messageId } });\n  }\n}\n\nmixin(\n  Event,\n  EventCategory,\n  EventInvitation,\n  EventMessage,\n  EventTicket\n);\n\nexport default Event;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Event.js\n **/","import { only, urlJoin } from './utils';\nimport { NAMESPACE, ENDPOINT_EVENT, ENDPOINT_CATEGORY } from './Event';\nimport eventCategorySchema from './schema/eventCategory';\n\n/**\n * An EventCategory is a sub-object of an Event. It describes a block of time within\n * an Event.\n *\n * @example\n * const gw = new Groundwork({...});\n *\n * // List all categories, while passing in an optional config\n * gw.events.listCategories({ page: 2, perPage: 10 })\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.fetchCategory(<event id>, <category id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * // Create a new category with required properties\n * const categoryProps = {\n *   description: 'Reserved for our most active supporters',\n *   quantityTotal: 10,\n *   timeEnd: '2016-09-26T15:00:00',\n *   timeStart: '2016-09-26T13:00:00',\n *   title: 'VIP'\n * };\n *\n * gw.events.createCategory(<event id>, categoryProps)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.updateCategory(<event id>, <category id>, { description: 'new description' })\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.replaceCategory(<event id>, <category id>, {...})\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.delCategory(<event id>, <category id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n */\nexport default class EventCategory {\n  /**\n   * List all Categories on an Event\n   *\n   * @param {String} eventId - id of event\n   * @param {Object} [opts] - options object\n   * @param {Number} [opts.page] -\n   *   an Integer indicating which page of results should be returned\n   * @param {Number} [opts.perPage] -\n   *   an Integer indicating how many results should be returned per request\n   * @param {String} [opts.startsBefore] -\n   *   an ISO-8601 formatted String given in local time without a timezone designator.\n   *   Only events occuring before the given timestamp will be returned.\n   * @param {String} [opts.startsAfter] -\n   *   an ISO-8601 formatted String given in local time without a timezone designator.\n   *   Only events occuring after the given timestamp will be returned.\n   * @return {Promise}\n   */\n  listCategories(eventId, opts = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const _opts = only(['page', 'perPage', 'startsBefore', 'startsAfter'], opts);\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY);\n\n    return this.http.get(url, { params: _opts });\n  }\n\n  /**\n   * Get a specific Category, by id\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} categoryId - id of category\n   * @return {Promise}\n   */\n  fetchCategory(eventId, categoryId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId);\n    return this.http.get(url);\n  }\n\n  /**\n   * Create a Category on an Event\n   *\n   * @param  {String} eventId - id of event\n   * @param  {Object} [category] - category object\n   * @return {Promise}\n   */\n  createCategory(eventId, category = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [categoryv, categoryp] = this.validatePayload(category, eventCategorySchema);\n    if (!categoryv) { return categoryp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY);\n\n    return this.http.post(url, category);\n  }\n\n  /**\n   * Update an existing Category, by id\n   *\n   * Only the fields that are passed will be updated.\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} categoryId - id of category\n   * @param  {Object} [category] - category object\n   * @return {Profile}\n   */\n  updateCategory(eventId, categoryId, category = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId);\n\n    return this.http.patch(url, category);\n  }\n\n  /**\n   * Replace an existing Category, by id\n   *\n   * All fields are updated. If an optional field is not provided, it will be\n   * overwritted as blank.\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} categoryId - id of category\n   * @param  {Object} [category] - category object\n   * @return {Promise}\n   */\n  replaceCategory(eventId, categoryId, category = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const [categoryv, categoryp] = this.validatePayload(category, eventCategorySchema);\n    if (!categoryv) { return categoryp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId);\n\n    return this.http.put(url, category);\n  }\n\n  /**\n   * Delete a specific Category, by id\n   *\n   * If there are Tickets associated with that Category, the request will fail.\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} categoryId - id of category\n   * @return {Promise}\n   */\n  delCategory(eventId, categoryId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId);\n    return this.http.delete(url);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/EventCategory.js\n **/","/*eslint-disable quote-props, quotes */\n\nexport default {\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"id\": \"/\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"description\": {\n      \"id\": \"description\",\n      \"type\": \"string\"\n    },\n    \"quantityTotal\": {\n      \"id\": \"quantityTotal\",\n      \"type\": \"integer\"\n    },\n    \"timeEnd\": {\n      \"id\": \"timeEnd\",\n      \"type\": \"string\"\n    },\n    \"timeStart\": {\n      \"id\": \"timeStart\",\n      \"type\": \"string\"\n    },\n    \"title\": {\n      \"id\": \"title\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"quantityTotal\",\n    \"timeEnd\",\n    \"timeStart\"\n  ]\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/schema/eventCategory.js\n **/","import { only, urlJoin } from './utils';\nimport { NAMESPACE, ENDPOINT_EVENT, ENDPOINT_INVITATION } from './Event';\nimport eventInvitationSchema from './schema/eventInvitation';\n\n/** @type {Array} - Status options for Invitation RSVP's */\nconst STATUSES = ['declined', 'pending'];\n\n/**\n * An EventInvitation is an email correspondence used to inform people of an event.\n *\n * @example\n * const gw = new Groundwork({...});\n *\n * // List all invitations, while passing in an optional config\n * gw.events.listInvitations({ status: 'pending', page: 2, perPage: 10 })\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.fetchInvitation(<event id>, <invitation id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.createInvitation(<event id>, {...})\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * //\n * gw.events.updateInvitationStatus(<event id>, <invitation id>, <status>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.delInvitation(<event id>, <invitation id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n */\nexport default class EventInvitation {\n\n  /**\n   * If the status of an invitation is neither `declined` nor `pending` then send back a\n   * tuple with a rejected Promise containing an error message.\n   *\n   * @param {String} status - status of the invitation\n   * @return {Array}\n   */\n  validateStatus(status) {\n    let out = [true];\n\n    const valid = STATUSES.some(s => s === status);\n\n    if (!valid) {\n      const response = this.http.generateErrorResponse({\n        valid: false,\n        fields: ['status'],\n        msg: [`Invalid status: ${status}. Options are \\`declined\\` or \\`pending\\``]\n      });\n      out = [false, Promise.reject(response)];\n    }\n\n    return out;\n  }\n\n  /**\n   * List all invitations on an Event\n   *\n   * @param  {String} eventId - id of event\n   * @param  {Object} [opts] - options object\n   * @param {Number} [opts.page] -\n   *   an Integer indicating which page of results should be returned\n   * @param {Number} [opts.perPage] -\n   *   an Integer indicating how many results should be returned per request\n   * @param  {String} [opts.status] -\n   *   the status by which you wish to filter. It may be accepted, declined, or pending\n   * @return {Promise}\n   */\n  listInvitations(eventId, opts = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const _opts = only(['page', 'perPage', 'status'], opts);\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_INVITATION);\n\n    return this.http.get(url, { params: _opts });\n  }\n\n  /**\n   * Get a specific Invitation, by id\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} invitationId - id of invitation\n   * @return {Promise}\n   */\n  fetchInvitation(eventId, invitationId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [iv, ip] = this.validateId(invitationId, 'invitationId');\n    if (!iv) { return ip; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_INVITATION, invitationId);\n    return this.http.get(url);\n  }\n\n  /**\n   * Create a new Invitation\n   *\n   * @param  {String} eventId - id of event\n   * @param  {Object[]} [invitations] - array of invitation objects\n   * @return {Promise}\n   */\n  createInvitation(eventId, invitations = []) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [iv, ip] = this.validatePayload(invitations, eventInvitationSchema);\n    if (!iv) { return ip; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_INVITATION);\n\n    return this.http.post(url, invitations);\n  }\n\n  /**\n   * Update the status of an Invitation, by id\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} invitationId - id of invitation\n   * @param  {String} status -\n   *   current RSVP status of the invitation. It may be `declined`, or `pending`\n   * @return {Promise}\n   */\n  updateInvitationStatus(eventId, invitationId, status) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [iv, ip] = this.validateId(invitationId, 'invitationId');\n    if (!iv) { return ip; }\n\n    const [sv, sp] = this.validateStatus(status);\n    if (!sv) { return sp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_INVITATION, invitationId);\n\n    return this.http.patch(url, { status });\n  }\n\n  /**\n   * Delete a specific Invitation, by id\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} invitationId - id of invitation\n   * @return {Promise}\n   */\n  delInvitation(eventId, invitationId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [iv, ip] = this.validateId(invitationId, 'invitationId');\n    if (!iv) { return ip; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_INVITATION, invitationId);\n    return this.http.delete(url);\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/EventInvitation.js\n **/","/*eslint-disable quote-props, quotes */\n\nexport default {\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"id\": \"/\",\n  \"type\": \"array\",\n  \"items\": {\n    \"id\": \"0\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"email\": {\n        \"id\": \"email\",\n        \"type\": \"string\"\n      },\n      \"familyName\": {\n        \"id\": \"familyName\",\n        \"type\": \"string\"\n      },\n      \"givenName\": {\n        \"id\": \"givenName\",\n        \"type\": \"string\"\n      },\n      \"message\": {\n        \"id\": \"message\",\n        \"type\": \"string\"\n      },\n      \"subject\": {\n        \"id\": \"subject\",\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\n      \"email\"\n    ]\n  },\n  \"required\": [\n    \"0\"\n  ]\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/schema/eventInvitation.js\n **/","import { only, urlJoin } from './utils';\nimport { NAMESPACE, ENDPOINT_EVENT, ENDPOINT_MESSAGE } from './Event';\nimport eventMessageSchema from './schema/eventMessage';\n\n/**\n * Send a Message to a subset of people associated with an eventId.\n *\n * @example\n * const gw = new Groundwork({...});\n *\n * // List all messages, while passing in an optional config\n * gw.events.listMessages({ page: 2, perPage: 10 })\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.fetchMessage(<event id>, <message id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * // Create a new message with required properties\n * const messageProps = {\n *   message: 'Excited to see you at my event!',\n *   recipientTypes: [\n *   \t 'attendees_redeemed',\n *   \t 'attendees_not_redeemed',\n *   \t 'invitees_pending',\n *   \t 'invitees_declined'\n *   ],\n *   subject: 'Cant wait to see you!',\n *   template: 'my_template',\n *   title: '1 more day!'\n * };\n *\n * gw.events.createMessage(<event id>, messageProps)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.delMessage(<event id>, <message id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n */\nexport default class EventMessage {\n\n  /**\n   * List all Messages on an Event\n   *\n   * @param {String} eventId - id of event\n   * @param {Object} [opts] - options object\n   * @param {Number} [opts.page] -\n   *   an Integer indicating which page of results should be returned\n   * @param {Number} [opts.perPage] -\n   *   an Integer indicating how many results should be returned per request\n   * @return {Promise}\n   */\n  listMessages(eventId, opts = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const _opts = only(['page', 'perPage'], opts);\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_MESSAGE);\n\n    return this.http.get(url, { params: _opts });\n  }\n\n  /**\n   * Get a specific Message, by id\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} messageId - id of message\n   * @return {Promise}\n   */\n  fetchMessage(eventId, messageId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [mv, mp] = this.validateId(messageId, 'messageId');\n    if (!mv) { return mp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_MESSAGE, messageId);\n    return this.http.get(url);\n  }\n\n  /**\n   * Create a Message on an Event\n   *\n   * @param  {String} eventId - id of event\n   * @param  {Object} [message] - message object\n   * @return {Promise}\n   */\n  createMessage(eventId, message = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [mv, mp] = this.validatePayload(message, eventMessageSchema);\n    if (!mv) { return mp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_MESSAGE);\n\n    return this.http.post(url, message);\n  }\n\n  /**\n   * Delete a specific Message, by id\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} messageId - id of message\n   * @return {Promise}\n   */\n  delMessage(eventId, messageId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [mv, mp] = this.validateId(messageId, 'messageId');\n    if (!mv) { return mp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_MESSAGE, messageId);\n    return this.http.delete(url);\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/EventMessage.js\n **/","/*eslint-disable quote-props, quotes */\n\nexport default {\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"message\": {\n      \"type\": \"string\",\n      \"id\": \"message\"\n    },\n    \"recipientTypes\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"id\": \"recipientTypes\"\n    },\n    \"subject\": {\n      \"type\": \"string\",\n      \"id\": \"subject\"\n    },\n    \"template\": {\n      \"type\": \"string\",\n      \"id\": \"template\"\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"id\": \"title\"\n    }\n  },\n  \"id\": \"/\",\n  \"required\": [\n    \"recipientTypes\",\n    \"template\"\n  ]\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/schema/eventMessage.js\n **/","import { only, urlJoin } from './utils';\nimport { NAMESPACE, ENDPOINT_EVENT, ENDPOINT_CATEGORY, ENDPOINT_TICKET } from './Event';\nimport eventTicketSchema from './schema/eventTicket';\n\n/**\n * An EventTicket represents participation in an EventCategory.\n *\n * @example\n * const gw = new Groundwork({...});\n *\n * // List all tickets, while passing in an optional config\n * gw.events.listTickets({ page: 2, perPage: 10 })\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.fetchTicket(<event id>, <category id>, <ticket id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.createTicket(<event id>, <category id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.updateTicket(<event id>, <category id>, <ticket id>, {...})\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.replaceTicket(<event id>, <category id>, <ticket id>, {...})\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.deleteTicket(<event id>, <category id>, <ticket id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n */\nexport default class EventTicket {\n  /**\n   * List all Tickets on a Category\n   *\n   * @param {String} eventId - id of event\n   * @param {String} categoryId - id of category\n   * @param {Object} [opts] - options object\n   * @param {Boolean} [opts.isRedeemed] -\n   *   a Boolean representing whether the ticket has been redeemed. Only tickets with\n   *   the given redemption status will be returned.\n   * @param {Number} [opts.page] -\n   *   an Integer indicating which page of results should be returned\n   * @param {Number} [opts.perPage] -\n   *   an Integer indicating how many results should be returned per request\n   * @param {String} [opts.purchaserGwid] -\n   *   is the GWID String of the user who purchased the tickets. Only tickets with the\n   *   given purchaser will be returned.\n   * @return {Promise}\n   */\n  listTickets(eventId, categoryId, opts = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const _opts = only(['isRedeemed', 'page', 'perPage', 'purchaserGwid'], opts);\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId,\n                                   ENDPOINT_TICKET);\n\n    return this.http.get(url, { params: _opts });\n  }\n\n  /**\n   * Get a specific Ticket, by id\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} categoryId - id of category\n   * @param  {String} ticketId - id of ticket\n   * @return {[type]}\n   */\n  fetchTicket(eventId, categoryId, ticketId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const [tv, tp] = this.validateId(ticketId, 'ticketId');\n    if (!tv) { return tp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId,\n                                   ENDPOINT_TICKET, ticketId);\n    return this.http.get(url);\n  }\n\n  /**\n   * Create a Ticket\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} categoryId - id of category\n   * @param  {Object} [ticket] - ticket object\n   * @return {Promise}\n   */\n  createTicket(eventId, categoryId, ticket = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const [ticketv, ticketp] = this.validatePayload(ticket, eventTicketSchema);\n    if (!ticketv) { return ticketp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId,\n                                   ENDPOINT_TICKET);\n\n    return this.http.post(url, ticket);\n  }\n\n  /**\n   * Update an existing Ticket, by id\n   *\n   * Only the fields that are passed will be updated.\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} categoryId - id of category\n   * @param  {String} ticketId - id of ticket\n   * @param  {Object} [ticket] - ticket object\n   * @return {Promise}\n   */\n  updateTicket(eventId, categoryId, ticketId, ticket = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const [tv, tp] = this.validateId(ticketId, 'ticketId');\n    if (!tv) { return tp; }\n\n    const [ticketv, ticketp] = this.validatePayload(ticket, eventTicketSchema);\n    if (!ticketv) { return ticketp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId,\n                                   ENDPOINT_TICKET, ticketId);\n\n    return this.http.patch(url, ticket);\n  }\n\n  /**\n   * Replace an existing Ticket, by id\n   *\n   * All fields are updated. If an optional field is not provided, it will be\n   * overwritten as blank.\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} categoryId - id of category\n   * @param  {String} ticketId - id of ticket\n   * @param  {Object} [ticket] - ticket object\n   * @return {Promise}\n   */\n  replaceTicket(eventId, categoryId, ticketId, ticket = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const [tv, tp] = this.validateId(ticketId, 'ticketId');\n    if (!tv) { return tp; }\n\n    const [ticketv, ticketp] = this.validatePayload(ticket, eventTicketSchema);\n    if (!ticketv) { return ticketp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId,\n                                   ENDPOINT_TICKET, ticketId);\n\n    return this.http.put(url, ticket);\n  }\n\n  /**\n   * Delete a specific Ticket, by id\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} categoryId - id of category\n   * @param  {String} ticketId - id of ticket\n   * @return {Promise}\n   */\n  delTicket(eventId, categoryId, ticketId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const [tv, tp] = this.validateId(ticketId, 'ticketId');\n    if (!tv) { return tp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId,\n                                   ENDPOINT_TICKET, ticketId);\n    return this.http.delete(url);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/EventTicket.js\n **/","/*eslint-disable quote-props, quotes */\n\nexport default {\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"id\": \"/\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"attendeeGwid\": {\n      \"id\": \"attendeeGwid\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"attendeeGwid\"\n  ]\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/schema/eventTicket.js\n **/","/*eslint-disable quote-props, quotes */\n\nexport default {\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"id\": \"/\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"address1\": {\n      \"id\": \"address1\",\n      \"type\": \"string\"\n    },\n    \"address2\": {\n      \"id\": \"address2\",\n      \"type\": \"string\"\n    },\n    \"addressCity\": {\n      \"id\": \"addressCity\",\n      \"type\": \"string\"\n    },\n    \"addressCountry\": {\n      \"id\": \"addressCountry\",\n      \"type\": \"string\"\n    },\n    \"addressCounty\": {\n      \"id\": \"addressCounty\",\n      \"type\": \"string\"\n    },\n    \"addressDistrict\": {\n      \"id\": \"addressDistrict\",\n      \"type\": \"string\"\n    },\n    \"addressPostalCode\": {\n      \"id\": \"addressPostalCode\",\n      \"type\": \"string\"\n    },\n    \"addressStateOrProvince\": {\n      \"id\": \"addressStateOrProvince\",\n      \"type\": \"string\"\n    },\n    \"description\": {\n      \"id\": \"description\",\n      \"type\": \"string\"\n    },\n    \"locationName\": {\n      \"id\": \"locationName\",\n      \"type\": \"string\"\n    },\n    \"timeEnd\": {\n      \"id\": \"timeEnd\",\n      \"type\": \"string\"\n    },\n    \"timeStart\": {\n      \"id\": \"timeStart\",\n      \"type\": \"string\"\n    },\n    \"title\": {\n      \"id\": \"title\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"address1\",\n    \"addressCity\",\n    \"addressCountry\",\n    \"addressPostalCode\",\n    \"description\",\n    \"timeEnd\",\n    \"timeStart\",\n    \"title\"\n  ]\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/schema/event.js\n **/","import Dictionary from './Dictionary';\nimport SchemaUtils from './SchemaUtils';\nimport schema from './schema/profile';\nimport { urlJoin } from './utils';\n\nimport { cloneDeep } from 'lodash';\n\n/** @type {String} - API endpoint for resource */\nconst NAMESPACE = 'the-claw';\n\n/** @type {String} - API endpoint for profile resource */\nconst ENDPOINT_PROFILE = 'profiles';\n\n/** @type {String} - API endpoint for password reset */\nconst ENDPOINT_PASSWORD_RESET = 'password_resets';\n\nexport default class Profile {\n  /** @type {String} */\n  static service = 'profiles';\n\n  /**\n   * @param {Dictionary} [config] - configuration dictionary\n   * @param {Http} http\n   */\n  constructor(config, http) {\n    /** @type {Dictionary} */\n    this.config = (config && config instanceof Dictionary) ?\n      config : new Dictionary();\n\n    // Resource must have an Http instance\n    if (!http) {\n      throw new Error('Profile requires Http');\n    }\n\n    /** @type {Http} */\n    this.http = http;\n\n    /** @type {String} */\n    this.schema = schema;\n\n    /** @type {SchemaUtils} */\n    this.schemaUtils = SchemaUtils;\n  }\n\n  /**\n   * Validate payload object and return object with validation status and any\n   * errors that crop up\n   *\n   * @example\n   *\n   * validateProfile({foo: 1, source: 'foo', email: 'bar'});\n   * // => { valid: false, fields: ['email'], msg: ['Invalid email address']}\n   *\n   *\n   * validateProfile({source: 'foo', email: 'bar@baz.biz'});\n   * // => { valid: true, fields: [], msg: [] }\n   *\n   * @param {Object} [profile={}] - profile object\n   * @param {Object} [_schema=this.schema] - JSON schema for profile\n   * @return {Object}\n   */\n  validateProfile(profile = {}, _schema = this.schema) {\n    let out = [true];\n    const valid = this.schemaUtils.validateSchema(profile, _schema);\n\n    if (valid.length > 0) {\n      const ret = this.http.generateErrorObject();\n      valid.forEach((err) => {\n        ret.msg.push(err.message);\n        ret.fields.push(this.schemaUtils.extractFieldByError(err));\n      });\n      out = [false, Promise.reject(this.http.generateErrorResponse(ret))];\n    }\n    return out;\n  }\n\n  /**\n   * Fetch a single Profile object\n   *\n   * @param {String} [gwid=''] - profile gwid\n   * @return {Promise}\n   */\n  fetch(gwid = '') {\n    const url = urlJoin(NAMESPACE, ENDPOINT_PROFILE, gwid);\n    return this.http.get(url);\n  }\n\n  /**\n   * POST a Profile record to the API\n   *\n   * The passed in form object will be validated. If it fails, a mock response\n   * with any errors will be sent back in a rejected Promise. This is to present\n   * the least amount of surprise to the developer.\n   *\n   * @example\n   * // validation fail\n   * profile.create({}).catch((err) => console.log(err));\n   * // => { status: 400, data: { error: { valid: false, ... } } ... }\n   *\n   * @param {Object} [profile={}] - profile object\n   * @return {Promise}\n   */\n  create(profile = {}) {\n    // Return a mock error response with validation errors\n    const [cf, cp] = this.validateProfile(profile);\n    if (!cf) { return cp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_PROFILE);\n    return this.http.post(url, profile);\n  }\n\n  /**\n   * PUT a Profile record to the API\n   *\n   * The passed in form object will be validated. If it fails, a mock response\n   * with any errors will be sent back in a rejected Promise. This is to present\n   * the least amount of surprise to the developer.\n   *\n   * @example\n   * // validation fail\n   * profile.update({}).catch((err) => console.log(err));\n   * // => { status: 400, data: { error: { valid: false, ... } } ... }\n   *\n   * @param {String} [gwid=''] - gwid of profile to update\n   * @param {Object} [profile={}] - fields to update\n   * @return {Promise}\n   */\n  update(gwid = '', profile = {}) {\n    // Return a mock error response with validation errors\n    const putSchema = cloneDeep(this.schema);\n    delete putSchema.required; // No required fields in PUTs\n    const [cf, cp] = this.validateProfile(profile, putSchema);\n    if (!cf) { return cp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_PROFILE, gwid);\n    return this.http.put(url, profile);\n  }\n\n  /**\n   * Trigger a password reset for an email\n   *\n   * Email will be sent to the requested address with a reset link containing\n   * a token\n   *\n   * @param {String} [email=''] - profile email\n   * @return {Promise}\n   */\n  requestResetToken(email = '') {\n    const url = urlJoin(NAMESPACE, ENDPOINT_PASSWORD_RESET, '');\n    return this.http.post(url, { email });\n  }\n\n  /**\n   * PUT the new password and token to the API\n   *\n   * @param {String} [token=''] - reset token\n   * @param {String} [password=''] - new password\n   * @return {Promise}\n   */\n  resetPassword(token = '', password = '') {\n    const url = urlJoin(NAMESPACE, ENDPOINT_PASSWORD_RESET, token);\n    return this.http.put(url, { token, password });\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Profile.js\n **/","/*eslint-disable quote-props */\n\nexport default {\n  '$schema': 'http://json-schema.org/draft-04/schema#',\n  'id': '/',\n  'type': 'object',\n  'properties': {\n    'gwid': {\n      'id': 'gwid',\n      'type': 'string'\n    },\n    'email': {\n      'id': 'email',\n      'type': 'string'\n    },\n    'isStaff': {\n      'id': 'isStaff',\n      'type': 'boolean'\n    },\n    'isActive': {\n      'id': 'isActive',\n      'type': 'boolean'\n    },\n    'dateJoined': {\n      'id': 'dateJoined',\n      'type': 'string',\n      'format': 'date-time'\n    },\n    'dateModified': {\n      'id': 'dateModified',\n      'type': 'string',\n      'format': 'date-time'\n    },\n    'dateOfBirth': {\n      'id': 'dateOfBirth',\n      'type': ['string', 'null'],\n      'format': 'date-time'\n    },\n    'givenName': {\n      'id': 'givenName',\n      'type': 'string'\n    },\n    'familyName': {\n      'id': 'familyName',\n      'type': 'string'\n    },\n    'honorificPrefix': {\n      'id': 'honorificPrefix',\n      'type': 'string'\n    },\n    'honorificSuffix': {\n      'id': 'honorificSuffix',\n      'type': 'string'\n    },\n    'gender': {\n      'id': 'gender',\n      'type': ['integer', 'null'],\n      'minimum': 0,\n      'maximum': 4\n    },\n    'genderIdentity': {\n      'id': 'genderIdentity',\n      'type': 'string'\n    },\n    'partyIdentification': {\n      'id': 'partyIdentification',\n      'type': ['integer', 'null'],\n      'minimum': 0,\n      'maximum': 4\n    },\n    'password': {\n      'id': 'password',\n      'type': 'string'\n    },\n    'employer': {\n      'id': 'employer',\n      'type': 'string'\n    },\n    'occupation': {\n      'id': 'occupation',\n      'type': 'string'\n    },\n    'phoneNumber': {\n      'id': 'phoneNumber',\n      'type': 'string'\n    },\n    'address1': {\n      'id': 'address1',\n      'type': 'string'\n    },\n    'address2': {\n      'id': 'address2',\n      'type': 'string'\n    },\n    'locality': {\n      'id': 'locality',\n      'type': 'string'\n    },\n    'state': {\n      'id': 'state',\n      'type': 'string'\n    },\n    'zipCode': {\n      'id': 'zipCode',\n      'type': 'string'\n    }\n  },\n  'required': [\n    'email',\n    'familyName',\n    'givenName',\n    'password'\n  ]\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/schema/profile.js\n **/","import Payment from './Payment';\nimport schema from './schema/quickcard';\nimport schemaPay from './schema/quickcardPay';\nimport { urlJoin, has, only, epoch, max } from './utils';\n\n/** @type {String} - API endpoint for resource */\nconst ENDPOINT_QUICKCARD = 'quickcards';\n\n/**\n * Create and view quickcards\n *\n * list(opts) - get a filtered list of quickcards\n * create(quickcard) - create a new quickcard\n * fetch(id) - fetch a quickcard object\n *\n */\nexport default class Quickcard extends Payment {\n  /** @type {String} */\n  static service = 'quickcards';\n\n  /**\n   * Fetch a collection of Quickcard objects for a specific gwid. We try\n   * to enforce the inclusion of a gwid if one is present in CONFIG_AUTH\n   *\n   * @param {Object} opts\n   * @param {String} opts.gwid - gwid is required\n   * @param {String} [opts.email] - filter on email\n   * @param {Number} [opts.page] - page number\n   * @param {Number} [opts.perPage] - quickcards per page\n   * @return {Promise}\n   */\n  list(opts = {}) {\n    const params = only(['gwid', 'email', 'page', 'perPage'],\n                     this.attachIdentity(opts));\n\n    // Allow opts to Override the gwid from config\n    if (has(opts, 'gwid')) { params.gwid = opts.gwid; }\n\n    // Max 50 p/page\n    if (has(opts, 'perPage')) { params.perPage = max(opts.perPage); }\n\n    // Failsafe to force gwid property into place no matter what\n    if (!has(params, 'gwid')) { params.gwid = undefined; }\n\n    const url = urlJoin(this.namespace, ENDPOINT_QUICKCARD);\n    return this.fetchCollection(url, params);\n  }\n\n  /**\n   * Fetch a list of all donations made for a quickcard\n   *\n   * @param {String} id - quickcard id\n   * @return {Promise}\n   */\n  listDonations(id = '') {\n    // Must have an id\n    const [idv, idp] = this.validateId(id);\n    if (!idv) { return idp; }\n\n    const url = urlJoin(this.namespace, ENDPOINT_QUICKCARD, id, 'donations');\n    return this.fetchCollection(url);\n  }\n\n  /**\n   * Fetch a single Quickcard object\n   *\n   * @param {String} id - quickcard id\n   * @return {Promise}\n   */\n  fetch(id = '') {\n    // Must have an id\n    const [idv, idp] = this.validateId(id);\n    if (!idv) { return idp; }\n\n    const url = urlJoin(this.namespace, ENDPOINT_QUICKCARD, id);\n    return this.fetchCollection(url);\n  }\n\n  /**\n   * POST a quickcard record to the API\n   *\n   * User must be authed / have a gwid\n   *\n   * The passed in form object will be validated. If it fails, a mock response\n   * with any errors will be sent back in a rejected Promise. This is to present\n   * the least amount of surprise to the developer.\n   *\n   * Note: All of the values in the object passed to the method should have had\n   * their types coerced already or validation will fail.\n   *\n   * @example\n   * // validation fail\n   * donation.create({}).catch((err) => console.log(err));\n   * // => { status: 400, data: { error: { valid: false, ... } } ... }\n   *\n   * @param {Object} [quickcard]\n   * @return {Promise}\n   */\n  create(quickcard = {}) {\n    const _quickcard = this.attachIdentity(quickcard);\n    const checkQuickcard = this.validatePayment(_quickcard, schema);\n\n    // Return a mock error response with validation errors\n    if (checkQuickcard.valid === false) {\n      const response = this.http.generateErrorResponse(checkQuickcard);\n      return Promise.reject(response);\n    }\n\n    const url = urlJoin(this.namespace, ENDPOINT_QUICKCARD);\n    return this.http.post(url, _quickcard);\n  }\n\n  /**\n   * Delete (cancel) a quickcard\n   *\n   * Note: Quickcards can be cancelled on a date in the future by passing\n   * additional arguments.\n   *\n   * @example\n   * // Cancel quickcard abc123 today\n   * del('abc123');\n   *\n   * // Set a cancellation date of Oct 13, 2015 for quickcard abc123\n   * del('abc123', 2015, 10, 13)\n   *\n   * @param {String} id - quickcard id\n   * @param {...time<number>} [time] - year, month, day for a specific epoch\n   * @return {Promise}\n   */\n  del(id = '', ...time) {\n    const date = epoch.apply(null, time);\n\n    // Must have an id\n    const [idv, idp] = this.validateId(id);\n    if (!idv) { return idp; }\n\n    const url = urlJoin(this.namespace, ENDPOINT_QUICKCARD, id);\n    return this.http.put(url, { deleted: date });\n  }\n\n  /**\n   * Make a Quick Donate Payment - The Quick Donate endpoint can only be used if\n   * two conditions are met. First, the request needs to come from an\n   * authenticated user. Second, that authenticated user must have a stored and\n   * active Card object.\n   *\n   * @param {String} id - QuickCard id\n   * @param {Object} payment - payment object for QuickCard\n   * @return {Promise}\n   */\n  pay(id, payment = {}) {\n    // Must have an id\n    const [idv, idp] = this.validateId(id);\n    if (!idv) { return idp; }\n\n    const _payment = this.attachIdentity(payment);\n\n    // Validate payment and reject if errors\n    const [pv, pp] = this.validateSchema(_payment, schemaPay);\n    if (!pv) { return pp; }\n\n    const url = urlJoin(this.namespace,\n                        ENDPOINT_QUICKCARD,\n                        id,\n                        'donations');\n\n    return this.http.post(url, _payment);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Quickcard.js\n **/","/*eslint-disable quote-props */\n\nexport default {\n  '$schema': 'http://json-schema.org/draft-04/schema#',\n  'id': '/',\n  'type': 'object',\n  'properties': {\n    'amount': {\n      'id': 'amount',\n      'type': 'integer'\n    },\n    'currency': {\n      'id': 'currency',\n      'type': 'string'\n    },\n    'givenName': {\n      'id': 'givenName',\n      'type': 'string'\n    },\n    'gwid': {\n      'id': 'gwid',\n      'type': 'string'\n    },\n    'familyName': {\n      'id': 'familyName',\n      'type': 'string'\n    },\n    'address1': {\n      'id': 'address1',\n      'type': 'string'\n    },\n    'city': {\n      'id': 'city',\n      'type': 'string'\n    },\n    'state': {\n      'id': 'state',\n      'type': 'string'\n    },\n    'zip': {\n      'id': 'zip',\n      'type': 'string'\n    },\n    'country': {\n      'id': 'country',\n      'type': 'string'\n    },\n    'email': {\n      'id': 'email',\n      'type': 'string'\n    },\n    'phone': {\n      'id': 'phone',\n      'type': 'string'\n    },\n    'employer': {\n      'id': 'employer',\n      'type': 'string'\n    },\n    'occupation': {\n      'id': 'occupation',\n      'type': 'string'\n    },\n    'ccNum': {\n      'id': 'ccNum',\n      'type': 'string'\n    },\n    'ccExpMonth': {\n      'id': 'ccExpMonth',\n      'type': 'integer'\n    },\n    'ccExpYear': {\n      'id': 'ccExpYear',\n      'type': 'integer'\n    },\n    'ccCvc': {\n      'id': 'ccCvc',\n      'type': 'string'\n    },\n    'agreeToTerms': {\n      'id': 'agreeToTerms',\n      'type': 'boolean'\n    }\n  },\n  'required': [\n    'address1',\n    'agreeToTerms',\n    'ccCvc',\n    'ccExpMonth',\n    'ccExpYear',\n    'ccNum',\n    'city',\n    'country',\n    'email',\n    'employer',\n    'familyName',\n    'givenName',\n    'gwid',\n    'occupation',\n    'phone',\n    'state',\n    'zip'\n  ]\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/schema/quickcard.js\n **/","/*eslint-disable quote-props */\n\nexport default {\n  '$schema': 'http://json-schema.org/draft-04/schema#',\n  'id': '/',\n  'type': 'object',\n  'properties': {\n    'amount': {\n      'id': 'amount',\n      'type': 'integer'\n    },\n    'currency': {\n      'id': 'currency',\n      'type': 'string'\n    },\n    'tags': {\n      'id': 'tags',\n      'type': 'object'\n    },\n    'submittingUrl': {\n      'id': 'submittingUrl',\n      'type': 'string'\n    },\n    'emailTemplate': {\n      'id': 'emailTemplate',\n      'type': 'string'\n    },\n    'gwid': {\n      'id': 'gwid',\n      'type': 'string'\n    }\n  },\n  'required': [\n    'amount',\n    'gwid'\n  ]\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/schema/quickcardPay.js\n **/","import Payment from './Payment';\nimport schema from './schema/donation';\nimport { urlJoin, has, only, epoch, max } from './utils';\n\n/** @type {String} - API endpoint for resource */\nconst ENDPOINT_SUBSCRIPTION = 'subscriptions';\n\n/**\n * Create and view subscriptions\n *\n * list(opts) - get a filtered list of subscriptions\n * create(subscription) - create a new subscription\n * fetch(id) - fetch a subscription object\n *\n */\nexport default class Subscription extends Payment {\n  /** @type {String} */\n  static service = 'subscriptions';\n\n  /**\n   * Fetch a collection of Subscription objects for a specific gwid. We try\n   * to enforce the inclusion of a gwid if one is present in CONFIG_AUTH\n   *\n   * @param {Object} opts\n   * @param {String} opts.gwid - gwid is required\n   * @param {String} [opts.email] - filter on email\n   * @param {Number} [opts.page] - page number\n   * @param {Number} [opts.perPage] - subscriptions per page\n   * @return {Promise}\n   */\n  list(opts = {}) {\n    const params = only(['gwid', 'email', 'page', 'perPage'],\n                     this.attachIdentity(opts));\n\n    // Allow opts to override the gwid from config\n    if (has(opts, 'gwid')) { params.gwid = opts.gwid; }\n\n    // Max 50 p/page\n    if (has(opts, 'perPage')) { params.perPage = max(opts.perPage); }\n\n    // Failsafe to force gwid property into place no matter what\n    if (!has(params, 'gwid')) { params.gwid = undefined; }\n\n    const url = urlJoin(this.namespace, ENDPOINT_SUBSCRIPTION);\n    return this.fetchCollection(url, params);\n  }\n\n  /**\n   * Fetch a list of all donations made for a subscription\n   *\n   * @param {String} id - subscription id\n   * @return {Promise}\n   */\n  listDonations(id = '') {\n    // Must have an id\n    const [idv, idp] = this.validateId(id);\n    if (!idv) { return idp; }\n\n    const url = urlJoin(this.namespace, ENDPOINT_SUBSCRIPTION, id, 'donations');\n    return this.fetchCollection(url);\n  }\n\n  /**\n   * Fetch a single Subscription object\n   *\n   * @param {String} id - subscription id\n   * @return {Promise}\n   */\n  fetch(id = '') {\n    // Must have an id\n    const [idv, idp] = this.validateId(id);\n    if (!idv) { return idp; }\n\n    const url = urlJoin(this.namespace, ENDPOINT_SUBSCRIPTION, id);\n    return this.fetchCollection(url);\n  }\n\n  /**\n   * POST a subscription record to the API\n   *\n   * The passed in form object will be validated. If it fails, a mock response\n   * with any errors will be sent back in a rejected Promise. This is to present\n   * the least amount of surprise to the developer.\n   *\n   * Note: All of the values in the object passed to the method should have had\n   * their types coerced already or validation will fail.\n   *\n   * @example\n   * // validation fail\n   * supporter.create({}).catch((err) => console.log(err));\n   * // => { status: 400, data: { error: { valid: false, ... } } ... }\n   *\n   * @param {Object} [subscription]\n   * @return {Promise}\n   */\n  create(subscription = {}) {\n    // Make sure the interval is correct if its set\n    const [intervalv, intervalp] = this.validateInterval(subscription.interval);\n    if (!intervalv) { return intervalp; }\n\n    const checkSubscription = this.validatePayment(subscription, schema);\n\n    // Return a mock error response with validation errors\n    if (checkSubscription.valid === false) {\n      const response = this.http.generateErrorResponse(checkSubscription);\n      return Promise.reject(response);\n    }\n\n    const _subscription = this.attachIdentity(subscription);\n    const url = urlJoin(this.namespace, ENDPOINT_SUBSCRIPTION);\n    return this.http.post(url, _subscription);\n  }\n\n  /**\n   * Delete (cancel) a subscription\n   *\n   * Note: Subscriptions can be cancelled on a date in the future by passing\n   * additional arguments. Only Subscriptions created with a GWID can be\n   * cancelled through the API, and only the user that owns the Subscription\n   * can cancel it.\n   *\n   * @example\n   * // Cancel subscription abc123 today\n   * del('abc123');\n   *\n   * // Set a cancellation date of Oct 13, 2015 for subscription abc123\n   * del('abc123', 2015, 10, 13)\n   *\n   * @param {String} id - subscription id\n   * @param {...time<number>} [time] - year, month, day for a specific epoch\n   * @return {Promise}\n   */\n  del(id = '', ...time) {\n    // Must have an id\n    const [idv, idp] = this.validateId(id);\n    if (!idv) { return idp; }\n\n    const date = epoch.apply(null, time);\n    const url = urlJoin(this.namespace, ENDPOINT_SUBSCRIPTION, id);\n    return this.http.put(url, { cancelled: date });\n  }\n\n  /**\n   * Update the amount of a subscription. Return error of the amount is not set.\n   *\n   * @param {String} id - subscription id\n   * @param {Number} amount - new amount of subscription\n   * @return {Promise}\n   */\n  updateAmount(id, amount) {\n    // Must have an id\n    const newAmount = Number(amount);\n    const [idv, idp] = this.validateId(id);\n    if (!idv) { return idp; }\n\n    const [amountv, amountp] = this.validateArg(amount, 'amount');\n    if (!amountv) { return amountp; }\n\n    const url = urlJoin(this.namespace, ENDPOINT_SUBSCRIPTION, id);\n    return this.http.put(url, { amount: newAmount });\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Subscription.js\n **/","import Dictionary from './Dictionary';\nimport SchemaUtils from './SchemaUtils';\nimport { urlJoin, only } from './utils';\n\nimport schema from './schema/supporter';\n\n/** @type {String} - Top level endpoint */\nconst NAMESPACE = 'bucket';\n\n/** @type {String} - API endpoints for resource */\nconst ENDPOINT_SUPPORTERS = 'supporters';\n\n/**\n * Manage Supporter endpoint. Supporter POSTs are validated before a request\n * is made to the API.\n */\nexport default class Supporter {\n  /** @type {String} */\n  static service = 'supporters';\n\n  /**\n   * @param {Dictionary} [config] - configuration dictionary\n   * @param {Http} http\n   */\n  constructor(config, http) {\n    /** @type {Dictionary} */\n    this.config = (config && config instanceof Dictionary) ?\n      config : new Dictionary();\n\n    // Resource must have an Http instance\n    if (!http) {\n      throw new Error('Supporter requires Http');\n    }\n\n    /** @type {Http} */\n    this.http = http;\n\n    /** @type {Object} */\n    this.schema = schema;\n\n    /** @type {SchemaUtils} */\n    this.schemaUtils = SchemaUtils;\n  }\n\n  /**\n   * Validate payload object and return object with validation status and any\n   * errors that crop up\n   *\n   * @example\n   *\n   * validateForm({foo: 1, source: 'foo', email: 'bar'});\n   * // => { valid: false, fields: ['email'], msg: ['Invalid email address']}\n   *\n   *\n   * validateForm({source: 'foo', email: 'bar@baz.biz'});\n   * // => { valid: true, fields: [], msg: [] }\n   *\n   * @param {Object} form\n   * @return {Object}\n   */\n  validateForm(form = {}) {\n    let out = [true];\n    const valid = this.schemaUtils.validateSchema(form, this.schema);\n\n    if (valid.length > 0) {\n      const ret = this.http.generateErrorObject();\n      valid.forEach((err) => {\n        ret.msg.push(err.message);\n        ret.fields.push(this.schemaUtils.extractFieldByError(err));\n      });\n      out = [false, Promise.reject(this.http.generateErrorResponse(ret))];\n    }\n    return out;\n  }\n\n  /**\n   * POST a supporter record to the API\n   *\n   * The passed in form object will be validated. If it fails, a mock response\n   * with any errors will be sent back in a rejected Promise. This is to present\n   * the least amount of surprise to the developer.\n   *\n   * @example\n   * // validation fail\n   * supporter.create({}).catch((err) => console.log(err));\n   * // => { status: 400, data: { error: { valid: false, ... } } ... }\n   *\n   * @param {Object} form\n   * @return {Promise}\n   */\n  create(form = {}) {\n    // Return a mock error response with validation errors\n    const [cf, cp] = this.validateForm(form);\n    if (!cf) { return cp; }\n\n    const url = urlJoin(NAMESPACE);\n    return this.http.post(url, form);\n  }\n\n  /**\n   * Fetch a collection of Supporter objects.\n   * Pagination information can be sent as well. Opts are whitelisted\n   * to only the fields listed.\n   *\n   * @param {Object} opts\n   * @param {Number} [opts.page] - page number\n   * @param {Number} [opts.perPage] - donations per page\n   * @return {Promise}\n   */\n  list(opts = {}) {\n    const _opts = only(['page', 'perPage'], opts);\n    return this.http.get(urlJoin(NAMESPACE, ENDPOINT_SUPPORTERS),\n                         { params: _opts });\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Supporter.js\n **/","/*eslint-disable quote-props */\n\nexport default {\n  '$schema': 'http://json-schema.org/draft-04/schema#',\n  'id': '/',\n  'type': 'object',\n  'properties': {\n    'address1': {\n      'id': 'address1',\n      'type': 'string'\n    },\n    'address2': {\n      'id': 'address2',\n      'type': 'string'\n    },\n    'city': {\n      'id': 'city',\n      'type': 'string'\n    },\n    'country': {\n      'id': 'country',\n      'type': 'string'\n    },\n    'email': {\n      'id': 'email',\n      'type': 'string'\n    },\n    'externalId': {\n      'id': 'externalId',\n      'type': 'string'\n    },\n    'familyName': {\n      'id': 'familyName',\n      'type': 'string'\n    },\n    'givenName': {\n      'id': 'givenName',\n      'type': 'string'\n    },\n    'postalCode': {\n      'id': 'postalCode',\n      'type': 'string'\n    },\n    'source': {\n      'id': 'source',\n      'type': 'string'\n    },\n    'state': {\n      'id': 'state',\n      'type': 'string'\n    },\n    'tags': {\n      'id': 'tags',\n      'type': 'object',\n      'properties': {}\n    }\n  },\n  'required': []\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/schema/supporter.js\n **/","import Groundwork from './Groundwork';\n\nfunction groundworkFactory(services) {\n  return function lambda(opts) {\n    return new Groundwork(services, opts);\n  };\n}\n\nexport default groundworkFactory;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/groundworkFactory.js\n **/","import Donation from './Donation';\nimport Event from './Event';\nimport Profile from './Profile';\nimport Quickcard from './Quickcard';\nimport Subscription from './Subscription';\nimport Supporter from './Supporter';\nimport groundworkFactory from './groundworkFactory';\n\n// Default build with all services included\nconst Groundwork = groundworkFactory([\n  Donation,\n  Event,\n  Profile,\n  Quickcard,\n  Subscription,\n  Supporter\n]);\n\nmodule.exports = Groundwork;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/"],"sourceRoot":""}