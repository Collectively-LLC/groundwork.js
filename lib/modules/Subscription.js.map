{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6****","webpack:///./src/Subscription.js"],"names":["ENDPOINT_SUBSCRIPTION","Subscription","opts","params","attachIdentity","gwid","perPage","undefined","url","namespace","fetchCollection","id","validateId","idv","idp","subscription","validateInterval","interval","intervalv","intervalp","checkSubscription","validatePayment","valid","response","http","generateErrorResponse","reject","_subscription","post","time","date","apply","put","cancelled","amount","newAmount","Number","validateArg","amountv","amountp","service"],"mappings":"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","file":"Subscription.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Groundwork\"] = factory();\n\telse\n\t\troot[\"Groundwork\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","import Payment from './Payment';\nimport schema from './schema/donation';\nimport { urlJoin, has, only, epoch, max } from './utils';\n\n/** @type {String} - API endpoint for resource */\nconst ENDPOINT_SUBSCRIPTION = 'subscriptions';\n\n/**\n * Create and view subscriptions\n *\n * list(opts) - get a filtered list of subscriptions\n * create(subscription) - create a new subscription\n * fetch(id) - fetch a subscription object\n *\n */\nexport default class Subscription extends Payment {\n  /** @type {String} */\n  static service = 'subscriptions';\n\n  /**\n   * Fetch a collection of Subscription objects for a specific gwid. We try\n   * to enforce the inclusion of a gwid if one is present in CONFIG_AUTH\n   *\n   * @param {Object} opts\n   * @param {String} opts.gwid - gwid is required\n   * @param {String} [opts.email] - filter on email\n   * @param {Number} [opts.page] - page number\n   * @param {Number} [opts.perPage] - subscriptions per page\n   * @return {Promise}\n   */\n  list(opts = {}) {\n    const params = only(['gwid', 'email', 'page', 'perPage'],\n                     this.attachIdentity(opts));\n\n    // Allow opts to override the gwid from config\n    if (has(opts, 'gwid')) { params.gwid = opts.gwid; }\n\n    // Max 50 p/page\n    if (has(opts, 'perPage')) { params.perPage = max(opts.perPage); }\n\n    // Failsafe to force gwid property into place no matter what\n    if (!has(params, 'gwid')) { params.gwid = undefined; }\n\n    const url = urlJoin(this.namespace, ENDPOINT_SUBSCRIPTION);\n    return this.fetchCollection(url, params);\n  }\n\n  /**\n   * Fetch a list of all donations made for a subscription\n   *\n   * @param {String} id - subscription id\n   * @return {Promise}\n   */\n  listDonations(id = '') {\n    // Must have an id\n    const [idv, idp] = this.validateId(id);\n    if (!idv) { return idp; }\n\n    const url = urlJoin(this.namespace, ENDPOINT_SUBSCRIPTION, id, 'donations');\n    return this.fetchCollection(url);\n  }\n\n  /**\n   * Fetch a single Subscription object\n   *\n   * @param {String} id - subscription id\n   * @return {Promise}\n   */\n  fetch(id = '') {\n    // Must have an id\n    const [idv, idp] = this.validateId(id);\n    if (!idv) { return idp; }\n\n    const url = urlJoin(this.namespace, ENDPOINT_SUBSCRIPTION, id);\n    return this.fetchCollection(url);\n  }\n\n  /**\n   * POST a subscription record to the API\n   *\n   * The passed in form object will be validated. If it fails, a mock response\n   * with any errors will be sent back in a rejected Promise. This is to present\n   * the least amount of surprise to the developer.\n   *\n   * Note: All of the values in the object passed to the method should have had\n   * their types coerced already or validation will fail.\n   *\n   * @example\n   * // validation fail\n   * supporter.create({}).catch((err) => console.log(err));\n   * // => { status: 400, data: { error: { valid: false, ... } } ... }\n   *\n   * @param {Object} [subscription]\n   * @return {Promise}\n   */\n  create(subscription = {}) {\n    // Make sure the interval is correct if its set\n    const [intervalv, intervalp] = this.validateInterval(subscription.interval);\n    if (!intervalv) { return intervalp; }\n\n    const checkSubscription = this.validatePayment(subscription, schema);\n\n    // Return a mock error response with validation errors\n    if (checkSubscription.valid === false) {\n      const response = this.http.generateErrorResponse(checkSubscription);\n      return Promise.reject(response);\n    }\n\n    const _subscription = this.attachIdentity(subscription);\n    const url = urlJoin(this.namespace, ENDPOINT_SUBSCRIPTION);\n    return this.http.post(url, _subscription);\n  }\n\n  /**\n   * Delete (cancel) a subscription\n   *\n   * Note: Subscriptions can be cancelled on a date in the future by passing\n   * additional arguments. Only Subscriptions created with a GWID can be\n   * cancelled through the API, and only the user that owns the Subscription\n   * can cancel it.\n   *\n   * @example\n   * // Cancel subscription abc123 today\n   * del('abc123');\n   *\n   * // Set a cancellation date of Oct 13, 2015 for subscription abc123\n   * del('abc123', 2015, 10, 13)\n   *\n   * @param {String} id - subscription id\n   * @param {...time<number>} [time] - year, month, day for a specific epoch\n   * @return {Promise}\n   */\n  del(id = '', ...time) {\n    // Must have an id\n    const [idv, idp] = this.validateId(id);\n    if (!idv) { return idp; }\n\n    const date = epoch.apply(null, time);\n    const url = urlJoin(this.namespace, ENDPOINT_SUBSCRIPTION, id);\n    return this.http.put(url, { cancelled: date });\n  }\n\n  /**\n   * Update the amount of a subscription. Return error of the amount is not set.\n   *\n   * @param {String} id - subscription id\n   * @param {Number} amount - new amount of subscription\n   * @return {Promise}\n   */\n  updateAmount(id, amount) {\n    // Must have an id\n    const newAmount = Number(amount);\n    const [idv, idp] = this.validateId(id);\n    if (!idv) { return idp; }\n\n    const [amountv, amountp] = this.validateArg(amount, 'amount');\n    if (!amountv) { return amountp; }\n\n    const url = urlJoin(this.namespace, ENDPOINT_SUBSCRIPTION, id);\n    return this.http.put(url, { amount: newAmount });\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Subscription.js\n **/"],"sourceRoot":""}