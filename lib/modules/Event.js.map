{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///./src/Event.js","webpack:///./src/EventCategory.js","webpack:///./src/schema/eventCategory.js","webpack:///./src/EventInvitation.js","webpack:///./src/schema/eventInvitation.js","webpack:///./src/EventMessage.js","webpack:///./src/schema/eventMessage.js","webpack:///./src/EventTicket.js","webpack:///./src/schema/eventTicket.js","webpack:///./src/schema/event.js"],"names":["NAMESPACE","ENDPOINT_EVENT","ENDPOINT_CATEGORY","ENDPOINT_INVITATION","ENDPOINT_MESSAGE","ENDPOINT_TICKET","ENDPOINT_HOST_UNSUBSCRIBE","Event","config","http","Error","schemaUtils","payload","schema","out","valid","validateSchema","length","ret","generateErrorObject","forEach","err","msg","push","message","fields","extractFieldByError","reject","generateErrorResponse","id","name","undefined","response","opts","_opts","url","get","params","eventId","validateId","ev","ep","event","validatePayload","eventv","eventp","post","patch","put","delete","email","invitationId","messageId","service","EventCategory","categoryId","cv","cp","category","categoryv","categoryp","STATUSES","EventInvitation","status","some","s","iv","ip","invitations","validateStatus","sv","sp","EventMessage","mv","mp","EventTicket","ticketId","tv","tp","ticket","ticketv","ticketp"],"mappings":"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","file":"Event.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Groundwork\"] = factory();\n\telse\n\t\troot[\"Groundwork\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","import Dictionary from './Dictionary';\nimport SchemaUtils from './SchemaUtils';\nimport EventCategory from './EventCategory';\nimport EventInvitation from './EventInvitation';\nimport EventMessage from './EventMessage';\nimport EventTicket from './EventTicket';\nimport eventSchema from './schema/event';\nimport { mixin, only, urlJoin, validEmail } from './utils';\n\n/** @type {String} - API endpoint for resource */\nexport const NAMESPACE = 'events';\n\n/** @type {String} - API endpoint for event resource */\nexport const ENDPOINT_EVENT = 'events';\n\n/** @type {String} - API endpoint for category resource */\nexport const ENDPOINT_CATEGORY = 'categories';\n\n/** @type {String} - API endpoint for invitation resource */\nexport const ENDPOINT_INVITATION = 'invitations';\n\n/** @type {String} - API endpoint for message resource */\nexport const ENDPOINT_MESSAGE = 'messages';\n\n/** @type {String} - API endpoint for ticket resource */\nexport const ENDPOINT_TICKET = 'tickets';\n\n/** @type {String} - API endpoint for unsubscribing an email address */\nexport const ENDPOINT_HOST_UNSUBSCRIBE = 'host-unsubscribe';\n\n/**\n * An Event is a time and a place of an event. It also encompasses an event's\n * title and description.\n *\n * @example\n * const gw = new Groundwork({...});\n *\n * // List all events, while passing in an optional config\n * gw.events.list({ page: 2, perPage: 10 })\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.fetch(<event id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * // Create a new event with required properties\n * const eventProps = {\n *   address1: '641 Walnut St.',\n *   addressCity: 'Cincinnati',\n *   addressCountry: 'USA',\n *   addressPostalCode: '45202',\n *   addressStateOrProvince: 'Ohio',\n *   description: 'Come watch the Democratic and Republican candidates debate!',\n *   locationName: 'The Righteous Room',\n *   timeEnd: '2016-09-26T15:00:00',\n *   timeStart: '2016-09-26T12:00:00',\n *   title: 'Debate Watch Party at The Righteous Room'\n * };\n *\n * gw.events.create(eventProps)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.update({ description: 'updated description' })\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.replace({...})\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.delete(<event id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * // If authenticated, list all tickets across all events,\n * gw.events.listAllTickets({...})\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(error))\n *\n * gw.events.unsubscribe(<email>, <invitationId>)\n * \t .then((response) => console.log(response))\n * \t .catch((err) => console.error(err))\n */\nclass Event {\n  /** @type {String} */\n  static service = 'events';\n\n  /**\n   * @param {Dictionary} [config] - configuration dictionary\n   * @param {Http} http - Http instance\n   */\n  constructor(config, http) {\n    /** @type {Dictionary} */\n    this.config = (config && config instanceof Dictionary) ?\n      config : new Dictionary();\n\n    // Resource must have an Http instance\n    if (!http) {\n      throw new Error('Event requires Http');\n    }\n\n    /** @type {Http} */\n    this.http = http;\n\n    /** @type {SchemaUtils} */\n    this.schemaUtils = SchemaUtils;\n  }\n\n  /**\n   * Validate a payload against a schema. If it fails then return a tuple\n   * with a rejected Promise containing an error message.\n   *\n   * @param {Object} [payload]\n   * @param {Object} schema\n   * @return {Array}\n   */\n  validatePayload(payload = {}, schema) {\n    let out = [true];\n    const valid = this.schemaUtils.validateSchema(payload, schema);\n\n    if (valid.length > 0) {\n      const ret = this.http.generateErrorObject();\n      valid.forEach((err) => {\n        ret.msg.push(err.message);\n        ret.fields.push(this.schemaUtils.extractFieldByError(err));\n      });\n      out = [false, Promise.reject(this.http.generateErrorResponse(ret))];\n    }\n    return out;\n  }\n\n  /**\n   * If a specific function argument is missing then send back a tuple with a\n   * rejected Promise containing an error message.\n   *\n   * @param {*} id - value to check\n   * @param {String} [name] - name of argument being checked\n   * @return {Array}\n   */\n  validateId(id, name = '') {\n    let out = [true];\n\n    if (typeof id !== 'string' || id === null || id === undefined || id === false) {\n      const response = this.http.generateErrorResponse({\n        valid: false,\n        fields: [name],\n        msg: [`Invalid ID: ${name}`]\n      });\n      out = [false, Promise.reject(response)];\n    }\n\n    return out;\n  }\n\n  /**\n   * List all Events\n   *\n   * @param {Object} [opts] - options object\n   * @param {Array|String} [opts.hostGwid] -\n   *   The GWID String of the user who is hosting the event. Only events with the given\n   *   hostGwid will be returned. You may also pass multiple hostGwid's in an array\n   *   include multiple hosts in your request\n   * @param {Boolean} [opts.isDeleted] -\n   *   a Boolean of whether to only return Events that have been deleted. Defaults to\n   *   False. This option is currently only available to Admin users\n   * @param {Number} [opts.latitude] -\n   *   a numeric Float of a latitudinal geographic coordinate by which to filter results.\n   *   This parameter must be provided if performing a geographic filter\n   * @param {Number} [opts.longitude] -\n   *   a numeric Float of a longitudinal geographic coordinate by which to filter results.\n   *   This parameter must be provided if performing a geographic filter\n   * @param {Number} [opts.page] -\n   *   an Integer indicating which page of results should be returned\n   * @param {Number} [opts.perPage] -\n   *   an Integer indicating how many results should be returned per request\n   * @param {Number} [opts.radius] -\n   *   a numeric Float, given in kilometers, of the search radius by with to filter results.\n   *   This parameter must be provided if performing a geographic filter.\n   * @param {String} [opts.search] - a String search field that will query Event titles.\n   * @param {String} [opts.startsBefore] -\n   *   an ISO-8601 formatted String given in local time without a timezone designator.\n   *   Only events occuring before the given timestamp will be returned.\n   * @param {String} [opts.startsAfter] -\n   *   an ISO-8601 formatted String given in local time without a timezone designator.\n   *   Only events occuring after the given timestamp will be returned.\n   * @return {Promise}\n   */\n  list(opts = {}) {\n    const _opts = only(['hostGwid', 'isDeleted', 'latitude', 'longitude', 'page',\n                        'perPage', 'radius', 'search', 'startsBefore',\n                        'startsAfter'], opts);\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT);\n    return this.http.get(url, { params: _opts });\n  }\n\n  /**\n   * Get a specific Event, by id\n   *\n   * @param  {String} eventId - id of event\n   * @return {Promise}\n   */\n  fetch(eventId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId);\n    return this.http.get(url);\n  }\n\n  /**\n   * Create an Event\n   *\n   * The provided address will be geocoded to discover timezone information. If the\n   * geocode fails, the request will fail and the Event will not be created.\n   *\n   * @param  {Object} [event] - event object\n   * @return {Promise}\n   */\n  create(event = {}) {\n    const [eventv, eventp] = this.validatePayload(event, eventSchema);\n    if (!eventv) { return eventp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT);\n    return this.http.post(url, event);\n  }\n\n  /**\n   * Update an existing Event, by id\n   *\n   * Only the fields that are passed will be updated.\n   *\n   * If the address field is modified in full or in part, it will be re-geocoded to\n   * update timezone information. If the geocode fails, the request will fail and the\n   * Event will not be modified.\n   *\n   * @param  {String} eventId - id of event\n   * @param  {Object} [event] - fields to update\n   * @return {Promise}\n   */\n  update(eventId, event = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId);\n    return this.http.patch(url, event);\n  }\n\n  /**\n   * Replace an existing Event, by id\n   *\n   * All fields are updated. If an optional field is not provided, it will be overwritten\n   * as blank unless otherwise noted.\n   *\n   * If the address field is modified in full or in part, it will be re-geocoded to\n   * update timezone information. If the geocode fails, the request will fail and the\n   * Event will not be modified.\n   *\n   * @param  {String} eventId - id of event\n   * @param  {Object} [event] - fields to update\n   * @return {Promise}\n   */\n  replace(eventId, event = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [eventv, eventp] = this.validatePayload(event, eventSchema);\n    if (!eventv) { return eventp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId);\n    return this.http.put(url, event);\n  }\n\n  /**\n   * Delete a specific Event, by id\n   *\n   * If there are Tickets associated with any Categories under that event, the request\n   * will fail.\n   *\n   * @param  {String} eventId - id of event\n   * @return {Promise}\n   */\n  del(eventId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId);\n    return this.http.delete(url);\n  }\n\n  /**\n   * Get a list of all Tickets. When called by an authenticated user, it will return all\n   * Tickets that have that user as that `purchaserGwid`. When called by an Admin, it\n   * will return all tickets. Both responses are filterable with the optional query\n   * paramters.\n   *\n   * @param {Object} [opts] - options object\n   * @param {Boolean} [opts.isRedeemed] -\n   *   a Boolean representing whether the ticket has been redeemed. Only tickets with\n   *   the given redemption status will be returned.\n   * @param {Number} [opts.page] -\n   *   an Integer indicating which page of results should be returned\n   * @param {Number} [opts.perPage] -\n   *   an Integer indicating how many results should be returned per request\n   * @param {String} [opts.purchaserGwid] -\n   *   is the GWID String of the user who purchased the tickets. Only tickets with the\n   *   given purchaser will be returned.\n   * @param {String} [opts.startsBefore] -\n   *   an ISO-8601 formatted String given in local time without a timezone designator.\n   *   Only tickets in categories occurring before the given timestamp will be returned\n   * @param {String} [opts.startsAfter] -\n   *   an ISO-8601 formatted String given in local time without a timezone designator.\n   *   Only tickets in categories occurring after the given timestamp will be returned.\n   * @return {Promise}\n   */\n  listAllTickets(opts = {}) {\n    const _opts = only(['isRedeemed', 'page', 'perPage', 'purchaserGwid',\n                        'startsBefore', 'startsAfter'], opts);\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_TICKET);\n    return this.http.get(url, { params: _opts });\n  }\n\n  /**\n   * Unsubscribe an email address from all communication from a specific Event host.\n   *\n   * @param  {String} email - email address that wishes to unsubscribe\n   * @param  {Object} [opts] - unsubscribe options\n   * @param  {Object} [opts.invitationId] -\n   *   UUID String unique identifier of the Invitation that triggered the\n   *   unsubscribe request\n   * @param  {Object} [opts.messageId] -\n   *   UUID String unique identifier of the Message that triggered the\n   *   unsubscribe request\n   * @return {[type]}\n   */\n  unsubscribe(email, opts = {}) {\n    const valid = validEmail(email) && (typeof opts === 'object');\n\n    if (!valid) {\n      const response = this.http.generateErrorResponse({\n        valid: false,\n        fields: ['email', 'opts'],\n        msg: [`Valid \\`email\\` and \\`opts\\` are required. Passed email (${email}).\n               and opts (${opts})`]\n      });\n\n      return Promise.reject(response);\n    }\n\n    const { invitationId, messageId } = opts;\n\n    // Only allow users to use one type of ID to unsubscribe, not both\n    if (invitationId && messageId) {\n      const response = this.http.generateErrorResponse({\n        valid: false,\n        fields: ['invitationId', 'messageId'],\n        msg: ['Must unsubscribe via `invitationId` or `messageId`, not both.']\n      });\n\n      return Promise.reject(response);\n    }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_HOST_UNSUBSCRIBE);\n    return this.http.get(url, { params: { email, invitationId, messageId } });\n  }\n}\n\nmixin(\n  Event,\n  EventCategory,\n  EventInvitation,\n  EventMessage,\n  EventTicket\n);\n\nexport default Event;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Event.js\n **/","import { only, urlJoin } from './utils';\nimport { NAMESPACE, ENDPOINT_EVENT, ENDPOINT_CATEGORY } from './Event';\nimport eventCategorySchema from './schema/eventCategory';\n\n/**\n * An EventCategory is a sub-object of an Event. It describes a block of time within\n * an Event.\n *\n * @example\n * const gw = new Groundwork({...});\n *\n * // List all categories, while passing in an optional config\n * gw.events.listCategories({ page: 2, perPage: 10 })\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.fetchCategory(<event id>, <category id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * // Create a new category with required properties\n * const categoryProps = {\n *   description: 'Reserved for our most active supporters',\n *   quantityTotal: 10,\n *   timeEnd: '2016-09-26T15:00:00',\n *   timeStart: '2016-09-26T13:00:00',\n *   title: 'VIP'\n * };\n *\n * gw.events.createCategory(<event id>, categoryProps)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.updateCategory(<event id>, <category id>, { description: 'new description' })\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.replaceCategory(<event id>, <category id>, {...})\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.delCategory(<event id>, <category id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n */\nexport default class EventCategory {\n  /**\n   * List all Categories on an Event\n   *\n   * @param {String} eventId - id of event\n   * @param {Object} [opts] - options object\n   * @param {Number} [opts.page] -\n   *   an Integer indicating which page of results should be returned\n   * @param {Number} [opts.perPage] -\n   *   an Integer indicating how many results should be returned per request\n   * @param {String} [opts.startsBefore] -\n   *   an ISO-8601 formatted String given in local time without a timezone designator.\n   *   Only events occuring before the given timestamp will be returned.\n   * @param {String} [opts.startsAfter] -\n   *   an ISO-8601 formatted String given in local time without a timezone designator.\n   *   Only events occuring after the given timestamp will be returned.\n   * @return {Promise}\n   */\n  listCategories(eventId, opts = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const _opts = only(['page', 'perPage', 'startsBefore', 'startsAfter'], opts);\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY);\n\n    return this.http.get(url, { params: _opts });\n  }\n\n  /**\n   * Get a specific Category, by id\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} categoryId - id of category\n   * @return {Promise}\n   */\n  fetchCategory(eventId, categoryId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId);\n    return this.http.get(url);\n  }\n\n  /**\n   * Create a Category on an Event\n   *\n   * @param  {String} eventId - id of event\n   * @param  {Object} [category] - category object\n   * @return {Promise}\n   */\n  createCategory(eventId, category = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [categoryv, categoryp] = this.validatePayload(category, eventCategorySchema);\n    if (!categoryv) { return categoryp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY);\n\n    return this.http.post(url, category);\n  }\n\n  /**\n   * Update an existing Category, by id\n   *\n   * Only the fields that are passed will be updated.\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} categoryId - id of category\n   * @param  {Object} [category] - category object\n   * @return {Profile}\n   */\n  updateCategory(eventId, categoryId, category = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId);\n\n    return this.http.patch(url, category);\n  }\n\n  /**\n   * Replace an existing Category, by id\n   *\n   * All fields are updated. If an optional field is not provided, it will be\n   * overwritted as blank.\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} categoryId - id of category\n   * @param  {Object} [category] - category object\n   * @return {Promise}\n   */\n  replaceCategory(eventId, categoryId, category = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const [categoryv, categoryp] = this.validatePayload(category, eventCategorySchema);\n    if (!categoryv) { return categoryp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId);\n\n    return this.http.put(url, category);\n  }\n\n  /**\n   * Delete a specific Category, by id\n   *\n   * If there are Tickets associated with that Category, the request will fail.\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} categoryId - id of category\n   * @return {Promise}\n   */\n  delCategory(eventId, categoryId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId);\n    return this.http.delete(url);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/EventCategory.js\n **/","/*eslint-disable quote-props, quotes */\n\nexport default {\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"id\": \"/\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"description\": {\n      \"id\": \"description\",\n      \"type\": \"string\"\n    },\n    \"quantityTotal\": {\n      \"id\": \"quantityTotal\",\n      \"type\": \"integer\"\n    },\n    \"timeEnd\": {\n      \"id\": \"timeEnd\",\n      \"type\": \"string\"\n    },\n    \"timeStart\": {\n      \"id\": \"timeStart\",\n      \"type\": \"string\"\n    },\n    \"title\": {\n      \"id\": \"title\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"quantityTotal\",\n    \"timeEnd\",\n    \"timeStart\"\n  ]\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/schema/eventCategory.js\n **/","import { only, urlJoin } from './utils';\nimport { NAMESPACE, ENDPOINT_EVENT, ENDPOINT_INVITATION } from './Event';\nimport eventInvitationSchema from './schema/eventInvitation';\n\n/** @type {Array} - Status options for Invitation RSVP's */\nconst STATUSES = ['declined', 'pending'];\n\n/**\n * An EventInvitation is an email correspondence used to inform people of an event.\n *\n * @example\n * const gw = new Groundwork({...});\n *\n * // List all invitations, while passing in an optional config\n * gw.events.listInvitations({ status: 'pending', page: 2, perPage: 10 })\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.fetchInvitation(<event id>, <invitation id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.createInvitation(<event id>, {...})\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * //\n * gw.events.updateInvitationStatus(<event id>, <invitation id>, <status>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.delInvitation(<event id>, <invitation id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n */\nexport default class EventInvitation {\n\n  /**\n   * If the status of an invitation is neither `declined` nor `pending` then send back a\n   * tuple with a rejected Promise containing an error message.\n   *\n   * @param {String} status - status of the invitation\n   * @return {Array}\n   */\n  validateStatus(status) {\n    let out = [true];\n\n    const valid = STATUSES.some(s => s === status);\n\n    if (!valid) {\n      const response = this.http.generateErrorResponse({\n        valid: false,\n        fields: ['status'],\n        msg: [`Invalid status: ${status}. Options are \\`declined\\` or \\`pending\\``]\n      });\n      out = [false, Promise.reject(response)];\n    }\n\n    return out;\n  }\n\n  /**\n   * List all invitations on an Event\n   *\n   * @param  {String} eventId - id of event\n   * @param  {Object} [opts] - options object\n   * @param {Number} [opts.page] -\n   *   an Integer indicating which page of results should be returned\n   * @param {Number} [opts.perPage] -\n   *   an Integer indicating how many results should be returned per request\n   * @param  {String} [opts.status] -\n   *   the status by which you wish to filter. It may be accepted, declined, or pending\n   * @return {Promise}\n   */\n  listInvitations(eventId, opts = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const _opts = only(['page', 'perPage', 'status'], opts);\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_INVITATION);\n\n    return this.http.get(url, { params: _opts });\n  }\n\n  /**\n   * Get a specific Invitation, by id\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} invitationId - id of invitation\n   * @return {Promise}\n   */\n  fetchInvitation(eventId, invitationId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [iv, ip] = this.validateId(invitationId, 'invitationId');\n    if (!iv) { return ip; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_INVITATION, invitationId);\n    return this.http.get(url);\n  }\n\n  /**\n   * Create a new Invitation\n   *\n   * @param  {String} eventId - id of event\n   * @param  {Object[]} [invitations] - array of invitation objects\n   * @return {Promise}\n   */\n  createInvitation(eventId, invitations = []) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [iv, ip] = this.validatePayload(invitations, eventInvitationSchema);\n    if (!iv) { return ip; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_INVITATION);\n\n    return this.http.post(url, invitations);\n  }\n\n  /**\n   * Update the status of an Invitation, by id\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} invitationId - id of invitation\n   * @param  {String} status -\n   *   current RSVP status of the invitation. It may be `declined`, or `pending`\n   * @return {Promise}\n   */\n  updateInvitationStatus(eventId, invitationId, status) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [iv, ip] = this.validateId(invitationId, 'invitationId');\n    if (!iv) { return ip; }\n\n    const [sv, sp] = this.validateStatus(status);\n    if (!sv) { return sp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_INVITATION, invitationId);\n\n    return this.http.patch(url, { status });\n  }\n\n  /**\n   * Delete a specific Invitation, by id\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} invitationId - id of invitation\n   * @return {Promise}\n   */\n  delInvitation(eventId, invitationId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [iv, ip] = this.validateId(invitationId, 'invitationId');\n    if (!iv) { return ip; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_INVITATION, invitationId);\n    return this.http.delete(url);\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/EventInvitation.js\n **/","/*eslint-disable quote-props, quotes */\n\nexport default {\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"id\": \"/\",\n  \"type\": \"array\",\n  \"items\": {\n    \"id\": \"0\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"email\": {\n        \"id\": \"email\",\n        \"type\": \"string\"\n      },\n      \"familyName\": {\n        \"id\": \"familyName\",\n        \"type\": \"string\"\n      },\n      \"givenName\": {\n        \"id\": \"givenName\",\n        \"type\": \"string\"\n      },\n      \"message\": {\n        \"id\": \"message\",\n        \"type\": \"string\"\n      },\n      \"subject\": {\n        \"id\": \"subject\",\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\n      \"email\"\n    ]\n  },\n  \"required\": [\n    \"0\"\n  ]\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/schema/eventInvitation.js\n **/","import { only, urlJoin } from './utils';\nimport { NAMESPACE, ENDPOINT_EVENT, ENDPOINT_MESSAGE } from './Event';\nimport eventMessageSchema from './schema/eventMessage';\n\n/**\n * Send a Message to a subset of people associated with an eventId.\n *\n * @example\n * const gw = new Groundwork({...});\n *\n * // List all messages, while passing in an optional config\n * gw.events.listMessages({ page: 2, perPage: 10 })\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.fetchMessage(<event id>, <message id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * // Create a new message with required properties\n * const messageProps = {\n *   message: 'Excited to see you at my event!',\n *   recipientTypes: [\n *   \t 'attendees_redeemed',\n *   \t 'attendees_not_redeemed',\n *   \t 'invitees_pending',\n *   \t 'invitees_declined'\n *   ],\n *   subject: 'Cant wait to see you!',\n *   template: 'my_template',\n *   title: '1 more day!'\n * };\n *\n * gw.events.createMessage(<event id>, messageProps)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.delMessage(<event id>, <message id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n */\nexport default class EventMessage {\n\n  /**\n   * List all Messages on an Event\n   *\n   * @param {String} eventId - id of event\n   * @param {Object} [opts] - options object\n   * @param {Number} [opts.page] -\n   *   an Integer indicating which page of results should be returned\n   * @param {Number} [opts.perPage] -\n   *   an Integer indicating how many results should be returned per request\n   * @return {Promise}\n   */\n  listMessages(eventId, opts = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const _opts = only(['page', 'perPage'], opts);\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_MESSAGE);\n\n    return this.http.get(url, { params: _opts });\n  }\n\n  /**\n   * Get a specific Message, by id\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} messageId - id of message\n   * @return {Promise}\n   */\n  fetchMessage(eventId, messageId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [mv, mp] = this.validateId(messageId, 'messageId');\n    if (!mv) { return mp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_MESSAGE, messageId);\n    return this.http.get(url);\n  }\n\n  /**\n   * Create a Message on an Event\n   *\n   * @param  {String} eventId - id of event\n   * @param  {Object} [message] - message object\n   * @return {Promise}\n   */\n  createMessage(eventId, message = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [mv, mp] = this.validatePayload(message, eventMessageSchema);\n    if (!mv) { return mp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_MESSAGE);\n\n    return this.http.post(url, message);\n  }\n\n  /**\n   * Delete a specific Message, by id\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} messageId - id of message\n   * @return {Promise}\n   */\n  delMessage(eventId, messageId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [mv, mp] = this.validateId(messageId, 'messageId');\n    if (!mv) { return mp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_MESSAGE, messageId);\n    return this.http.delete(url);\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/EventMessage.js\n **/","/*eslint-disable quote-props, quotes */\n\nexport default {\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"message\": {\n      \"type\": \"string\",\n      \"id\": \"message\"\n    },\n    \"recipientTypes\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"id\": \"recipientTypes\"\n    },\n    \"subject\": {\n      \"type\": \"string\",\n      \"id\": \"subject\"\n    },\n    \"template\": {\n      \"type\": \"string\",\n      \"id\": \"template\"\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"id\": \"title\"\n    }\n  },\n  \"id\": \"/\",\n  \"required\": [\n    \"recipientTypes\",\n    \"template\"\n  ]\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/schema/eventMessage.js\n **/","import { only, urlJoin } from './utils';\nimport { NAMESPACE, ENDPOINT_EVENT, ENDPOINT_CATEGORY, ENDPOINT_TICKET } from './Event';\nimport eventTicketSchema from './schema/eventTicket';\n\n/**\n * An EventTicket represents participation in an EventCategory.\n *\n * @example\n * const gw = new Groundwork({...});\n *\n * // List all tickets, while passing in an optional config\n * gw.events.listTickets({ page: 2, perPage: 10 })\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.fetchTicket(<event id>, <category id>, <ticket id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.createTicket(<event id>, <category id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.updateTicket(<event id>, <category id>, <ticket id>, {...})\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.replaceTicket(<event id>, <category id>, <ticket id>, {...})\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n *\n * gw.events.deleteTicket(<event id>, <category id>, <ticket id>)\n *   .then((response) => console.log(response))\n *   .catch((err) => console.error(err));\n */\nexport default class EventTicket {\n  /**\n   * List all Tickets on a Category\n   *\n   * @param {String} eventId - id of event\n   * @param {String} categoryId - id of category\n   * @param {Object} [opts] - options object\n   * @param {Boolean} [opts.isRedeemed] -\n   *   a Boolean representing whether the ticket has been redeemed. Only tickets with\n   *   the given redemption status will be returned.\n   * @param {Number} [opts.page] -\n   *   an Integer indicating which page of results should be returned\n   * @param {Number} [opts.perPage] -\n   *   an Integer indicating how many results should be returned per request\n   * @param {String} [opts.purchaserGwid] -\n   *   is the GWID String of the user who purchased the tickets. Only tickets with the\n   *   given purchaser will be returned.\n   * @return {Promise}\n   */\n  listTickets(eventId, categoryId, opts = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const _opts = only(['isRedeemed', 'page', 'perPage', 'purchaserGwid'], opts);\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId,\n                                   ENDPOINT_TICKET);\n\n    return this.http.get(url, { params: _opts });\n  }\n\n  /**\n   * Get a specific Ticket, by id\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} categoryId - id of category\n   * @param  {String} ticketId - id of ticket\n   * @return {[type]}\n   */\n  fetchTicket(eventId, categoryId, ticketId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const [tv, tp] = this.validateId(ticketId, 'ticketId');\n    if (!tv) { return tp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId,\n                                   ENDPOINT_TICKET, ticketId);\n    return this.http.get(url);\n  }\n\n  /**\n   * Create a Ticket\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} categoryId - id of category\n   * @param  {Object} [ticket] - ticket object\n   * @return {Promise}\n   */\n  createTicket(eventId, categoryId, ticket = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const [ticketv, ticketp] = this.validatePayload(ticket, eventTicketSchema);\n    if (!ticketv) { return ticketp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId,\n                                   ENDPOINT_TICKET);\n\n    return this.http.post(url, ticket);\n  }\n\n  /**\n   * Update an existing Ticket, by id\n   *\n   * Only the fields that are passed will be updated.\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} categoryId - id of category\n   * @param  {String} ticketId - id of ticket\n   * @param  {Object} [ticket] - ticket object\n   * @return {Promise}\n   */\n  updateTicket(eventId, categoryId, ticketId, ticket = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const [tv, tp] = this.validateId(ticketId, 'ticketId');\n    if (!tv) { return tp; }\n\n    const [ticketv, ticketp] = this.validatePayload(ticket, eventTicketSchema);\n    if (!ticketv) { return ticketp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId,\n                                   ENDPOINT_TICKET, ticketId);\n\n    return this.http.patch(url, ticket);\n  }\n\n  /**\n   * Replace an existing Ticket, by id\n   *\n   * All fields are updated. If an optional field is not provided, it will be\n   * overwritten as blank.\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} categoryId - id of category\n   * @param  {String} ticketId - id of ticket\n   * @param  {Object} [ticket] - ticket object\n   * @return {Promise}\n   */\n  replaceTicket(eventId, categoryId, ticketId, ticket = {}) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const [tv, tp] = this.validateId(ticketId, 'ticketId');\n    if (!tv) { return tp; }\n\n    const [ticketv, ticketp] = this.validatePayload(ticket, eventTicketSchema);\n    if (!ticketv) { return ticketp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId,\n                                   ENDPOINT_TICKET, ticketId);\n\n    return this.http.put(url, ticket);\n  }\n\n  /**\n   * Delete a specific Ticket, by id\n   *\n   * @param  {String} eventId - id of event\n   * @param  {String} categoryId - id of category\n   * @param  {String} ticketId - id of ticket\n   * @return {Promise}\n   */\n  delTicket(eventId, categoryId, ticketId) {\n    const [ev, ep] = this.validateId(eventId, 'eventId');\n    if (!ev) { return ep; }\n\n    const [cv, cp] = this.validateId(categoryId, 'categoryId');\n    if (!cv) { return cp; }\n\n    const [tv, tp] = this.validateId(ticketId, 'ticketId');\n    if (!tv) { return tp; }\n\n    const url = urlJoin(NAMESPACE, ENDPOINT_EVENT, eventId,\n                                   ENDPOINT_CATEGORY, categoryId,\n                                   ENDPOINT_TICKET, ticketId);\n    return this.http.delete(url);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/EventTicket.js\n **/","/*eslint-disable quote-props, quotes */\n\nexport default {\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"id\": \"/\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"attendeeGwid\": {\n      \"id\": \"attendeeGwid\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"attendeeGwid\"\n  ]\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/schema/eventTicket.js\n **/","/*eslint-disable quote-props, quotes */\n\nexport default {\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"id\": \"/\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"address1\": {\n      \"id\": \"address1\",\n      \"type\": \"string\"\n    },\n    \"address2\": {\n      \"id\": \"address2\",\n      \"type\": \"string\"\n    },\n    \"addressCity\": {\n      \"id\": \"addressCity\",\n      \"type\": \"string\"\n    },\n    \"addressCountry\": {\n      \"id\": \"addressCountry\",\n      \"type\": \"string\"\n    },\n    \"addressCounty\": {\n      \"id\": \"addressCounty\",\n      \"type\": \"string\"\n    },\n    \"addressDistrict\": {\n      \"id\": \"addressDistrict\",\n      \"type\": \"string\"\n    },\n    \"addressPostalCode\": {\n      \"id\": \"addressPostalCode\",\n      \"type\": \"string\"\n    },\n    \"addressStateOrProvince\": {\n      \"id\": \"addressStateOrProvince\",\n      \"type\": \"string\"\n    },\n    \"description\": {\n      \"id\": \"description\",\n      \"type\": \"string\"\n    },\n    \"locationName\": {\n      \"id\": \"locationName\",\n      \"type\": \"string\"\n    },\n    \"timeEnd\": {\n      \"id\": \"timeEnd\",\n      \"type\": \"string\"\n    },\n    \"timeStart\": {\n      \"id\": \"timeStart\",\n      \"type\": \"string\"\n    },\n    \"title\": {\n      \"id\": \"title\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"address1\",\n    \"addressCity\",\n    \"addressCountry\",\n    \"addressPostalCode\",\n    \"description\",\n    \"timeEnd\",\n    \"timeStart\",\n    \"title\"\n  ]\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/schema/event.js\n **/"],"sourceRoot":""}